@if ($enable-grid-classes) {
	.container-fluid-max {
		@each $breakpoint, $max-width in $container-max-widths {
			$infix: '-#{$breakpoint}';

			&#{$infix} {
				max-width: $max-width;
			}
		}
	}

	.container-no-gutters {
		@include clay-container-no-gutters;

		@each $breakpoint in map-keys($grid-breakpoints) {
			$next: breakpoint-next($breakpoint, $grid-breakpoints);
			$infix: breakpoint-infix($next, $grid-breakpoints);

			@if not ($infix == '') { // .container-no-gutters-sm-down, md-down, lg-down, xl-down
				&#{$infix}-down {
					@include media-breakpoint-down($breakpoint) {
						@include clay-container-no-gutters;
					}
				}
			}
		}
	}

	%clay-custom-grid-wrapper {
		display: flex;
		flex-wrap: wrap;
		list-style: none;
		margin-bottom: 0;
		padding-left: 0;

		.container &,
		.container-fluid & {
			margin-left: -($grid-gutter-width / 2);
			margin-right: -($grid-gutter-width / 2);
		}
	}
}

.container-form {
	padding-bottom: $container-form-padding-bottom;
	padding-left: $container-form-padding-left;
	padding-right: $container-form-padding-right;
	padding-top: $container-form-padding-top;

	@include clay-scale-component {
		padding-bottom: $container-form-padding-bottom-mobile;
		padding-left: $container-form-padding-left-mobile;
		padding-right: $container-form-padding-right-mobile;
		padding-top: $container-form-padding-top-mobile;
	}
}

.container-view {
	padding-bottom: $container-view-padding-bottom;
	padding-left: $container-view-padding-left;
	padding-right: $container-view-padding-right;
	padding-top: $container-view-padding-top;

	@include clay-scale-component {
		padding-bottom: $container-view-padding-bottom-mobile;
		padding-left: $container-view-padding-left-mobile;
		padding-right: $container-view-padding-right-mobile;
		padding-top: $container-view-padding-top-mobile;
	}
}