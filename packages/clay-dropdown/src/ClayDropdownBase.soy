{namespace ClayDropdownBase}

/**
 * This renders a dropdown.
 */
{template .render}
	{@param items: list<?>}
	{@param label: html|string}
	{@param? _handleButtonClick: any}
	{@param? _handleItemClick: any}
	{@param? _handleSearch: any}
	{@param? button: ?}
	{@param? caption: string}
	{@param? contentRenderer: string}
	{@param? disabled: bool}
	{@param? elementClasses: string}
	{@param? expanded: bool}
	{@param? helpText: string}
	{@param? id: string}
	{@param? itemsIconAlignment: string}
	{@param? portalElementId: string}
	{@param? searchable: bool}
	{@param? spritemap: string}
	{@param? style: string}
	{@param? triggerClasses: string}
	{@param? triggerSize: string}
	{@param? triggerTitle: string}

	{let $attributes kind="attributes"}
		class="dropdown
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}

			{if $expanded}
				{sp}show
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<div {$attributes}>
		{call .trigger}
			{param classes: $triggerClasses /}
			{param disabled: $disabled /}
			{param expanded: $expanded /}
			{param label: $label /}
			{param size: $triggerSize /}
			{param style: $style /}
			{param title: $triggerTitle /}
		{/call}

		{call .sections}
			{param _handleButtonClick: $_handleButtonClick /}
			{param _handleItemClick: $_handleItemClick /}
			{param _handleSearch: $_handleSearch /}
			{param button: $button /}
			{param caption: $caption /}
			{param contentRenderer: $contentRenderer ?: '' /}
			{param expanded: $expanded /}
			{param helpText: $helpText /}
			{param items: $items /}
			{param itemsIconAlignment: $itemsIconAlignment /}
			{param portalElementId: $portalElementId /}
			{param searchable: $searchable /}
			{param spritemap: $spritemap /}
		{/call}
	</div>
{/template}

/**
 * Renders a list of items
 */
{template .items}
	{@param items: list<?>}
	{@param? _handleItemClick: any}
	{@param? contentRenderer: string}
	{@param? itemsIconAlignment: string}
	{@param? maxItems: int}
	{@param? spritemap: string}

	{for $index in range($maxItems and $maxItems < length($items) ? $maxItems : length($items))}
		{let $item: $items[$index] /}

		{let $variant kind="text"}
			{if isNonnull($contentRenderer) and $contentRenderer != ''}
				{$contentRenderer}
			{elseif isNonnull($item.contentRenderer) and $item.contentRenderer != ''}
				{$item.contentRenderer}
			{elseif $item.type}
				{$item.type}
			{else}
				item
			{/if}
		{/let}

		{call ClayDropdownItem.render}
			{param active: $item.active /}
			{param checked: $item.checked /}
			{param contentRenderer: $variant /}
			{param data: $item.data /}
			{param disabled: $item.disabled /}
			{param events: ['itemClicked' : $_handleItemClick ] /}
			{param href: $item.href /}
			{param icon: $item.icon /}
			{param inputName: $item.inputName /}
			{param inputValue: $item.inputValue /}
			{param items: $item.items /}
			{param itemsIconAlignment: $itemsIconAlignment /}
			{param label: $item.label ? '' + $item.label : '' /}
			{param maxItems: $item.maxItems /}
			{param separator: $item.separator /}
			{param spritemap: $spritemap /}
			{param target: $item.target /}
			{param title: $item.title /}
			{param type: $item.type /}
		{/call}

		{if $item.separator}
			{call ClayDropdownItem.render}
				{param contentRenderer: 'separator' /}
			{/call}
		{/if}
	{/for}
{/template}

/**
 * Renders a search input
 */
{template .search}
	{@param spritemap: string}
	{@param? _handleSearch: any}

	<form>
		<div class="dropdown-section">
			<div class="input-group input-group-sm">
				<div class="input-group-item">
					<input aria-label="Search for..." class="form-control input-group-inset input-group-inset-after" data-oninput="{$_handleSearch}" placeholder="Search for..." type="text" ref="searchInput" />

					<span class="input-group-inset-item input-group-inset-item-after">
						{call ClayButton.render}
							{param icon: 'search' /}
							{param spritemap: $spritemap /}
							{param style: 'link' /}
						{/call}
					</span>
				</div>
			</div>
		</div>
	</form>
{/template}

/**
 * Renders the dropdown sections
 */
{template .sections}
	{@param items: list<?>}
	{@param? _handleButtonClick: any}
	{@param? _handleItemClick: any}
	{@param? _handleSearch: any}
	{@param? button: ?}
	{@param? caption: string}
	{@param? contentRenderer: string}
	{@param? expanded: bool}
	{@param? helpText: string}
	{@param? itemsIconAlignment: string}
	{@param? portalElementId: string}
	{@param? searchable: bool}
	{@param? spritemap: string}

	{let $dropdownMenu kind="html"}
		{let $listAttributes kind="attributes"}
			class="dropdown-menu
				{if $itemsIconAlignment == 'left'}
					{sp}dropdown-menu-indicator-start
				{elseif $itemsIconAlignment == 'right'}
					{sp}dropdown-menu-indicator-end
				{/if}

				{if $expanded}
					{sp}show
				{/if}
			"
			ref="menu"
		{/let}

		<div {$listAttributes}>
			{if $helpText}
				<div class="alert alert-fluid alert-info" role="alert">
					{$helpText}
				</div>
			{/if}

			{if $searchable and $spritemap}
				{call .search}
					{param _handleSearch: $_handleSearch /}
					{param spritemap: $spritemap /}
				{/call}
			{/if}

			{let $listItemsContent kind="html"}
				{delcall ClayDropdownBase.Content variant="$contentRenderer"}
					{param _handleItemClick: $_handleItemClick /}
					{param contentRenderer: $contentRenderer /}
					{param items: $items /}
					{param itemsIconAlignment: $itemsIconAlignment /}
					{param spritemap: $spritemap /}
				{/delcall}
			{/let}

			{let $captionContent kind="html"}
				{if $caption}
					<div class="dropdown-caption">{$caption}</div>
				{/if}
			{/let}

			{if $button}
				<form>
					<div class="inline-scroller">
						{$listItemsContent}
					</div>

					{$captionContent}

					<div class="dropdown-section">
						{if isNonnull($button.href)}
							{call ClayLink.render}
								{param buttonStyle: $button.buttonStyle /}
								{param elementClasses: 'btn-block' /}
								{param events: ['click': $_handleButtonClick] /}
								{param href: $button.href /}
								{param label: $button.label /}
								{param ref: 'dropdownButton' /}
							{/call}
						{else}
							{call ClayButton.render}
								{param block: true /}
								{param events: ['click': $_handleButtonClick ]/}
								{param label: $button.label /}
								{param ref: 'dropdownButton' /}
								{param style: $button.style /}
								{param type: $button.type ?: 'button' /}
							{/call}
						{/if}
					</div>
				</form>
			{else}
				{$listItemsContent}

				{$captionContent}
			{/if}
		</div>
	{/let}

	{call ClayPortal.render}
		{param content kind="html"}
			{$dropdownMenu}
		{/param}
		{param portalElement: '#' + $portalElementId /}
		{param ref: 'portal' /}
	{/call}
{/template}

/**
 * Renders the trigger button
 */
{template .trigger}
	{@param label: html|string}
	{@param? classes: string}
	{@param? disabled: bool}
	{@param? expanded: bool}
	{@param? size: string}
	{@param? style: string}
	{@param? title: string}

	{let $buttonAttributes kind="attributes"}
		{if $expanded}
			aria-expanded="true"
		{else}
			aria-expanded="false"
		{/if}

		aria-haspopup="true"
		aria-label="toggle"
		class="dropdown-toggle btn
			{if $classes}
				{sp}{$classes}
			{/if}

			{if $size}
				{sp}btn-{$size}
			{/if}

			{if $style}
				{sp}btn-{$style}
			{else}
				{sp}btn-unstyled
			{/if}
		"

		{if $disabled}
			disabled
		{else}
			data-onclick="toggle"
		{/if}

		ref="triggerButton"

		{if $title}
			title="{$title}"
		{/if}

		type="button"
	{/let}

	<button {$buttonAttributes}>
		{$label}
	</button>
{/template}

/**
 * Renders the dropdown menu content
 */
{deltemplate ClayDropdownBase.Content}
	{@param? _handleItemClick: any}
	{@param? contentRenderer: string}
	{@param? items: list<?>}
	{@param? itemsIconAlignment: string}
	{@param? spritemap: string}

	{if $items}
		<ul class="list-unstyled">
			{call .items}
				{param _handleItemClick: $_handleItemClick /}
				{param items: $items /}
				{param itemsIconAlignment: $itemsIconAlignment /}
				{param spritemap: $spritemap /}
			{/call}
		</ul>
	{/if}
{/deltemplate}