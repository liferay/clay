{namespace ClayList}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param schema: [
		fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			iconsMap: ?,
			iconShapesMap: ?,
			labelStylesMap: ?
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleItemToggled: any}
	{@param? elementClasses: string}
	{@param? id: string}
	{@param? items: list<?>}
	{@param? selectable: bool}
	{@param? spritemap: string}

	{let $attributes kind="attributes"}
		class="list-group show-quick-actions-on-hover
			{if $elementClasses}
				{sp}elementClasses
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<ul {$attributes}>
		{if $items}
			{call .items}
				{param _handleItemToggled: $_handleItemToggled /}
				{param groupName: $id /}
				{param items: $items /}
				{param schema:	$schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	</ul>
{/template}

/**
 * This renders an item
 */
{template .item}
	{@param item: ?}
	{@param schema: [
		fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			iconsMap: ?,
			iconShapesMap: ?,
			labelStylesMap: ?
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleItemToggled: any}
	{@param? groupName: string}
	{@param? selectable: bool}
	{@param? spritemap: string}

	{let $listItemClasses kind="text"}
    list-group-item list-group-item-flex
  		{if $item.selected}
	  		{sp}active
		  {/if}
	{/let}

	<li class="{$listItemClasses}">
		{if $selectable}
			<div class="autofit-col">
				{call ClayCheckbox.render}
					{param ariaLabelledBy: $groupName ? 'group-' + $groupName : null /}
					{param checked: $item.selected /}
					{param disabled: $item.disabled /}
					{param events: ['change': $_handleItemToggled] /}
					{param label kind="text"}
						{if $item.selected}
							{msg desc="The word 'select' used as a verb"}
								select
							{/msg}
						{else}
							{msg desc="The word 'deselect' used as a verb"}
								deselect
							{/msg}
						{/if}
					{/param}

					{param name kind="text"}
						{if $schema.inputName}
							{$schema.inputName}
						{elseif $schema.inputNameField and $schema.inputNamesMap}
							{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
								{$schema.inputNamesMap[$item[$schema.inputNameField]]}
							{elseif $schema.inputNamesMap['*']}
								{$schema.inputNamesMap['*']}
							{/if}
						{/if}
					{/param}

					{param showLabel: false /}
					{param value: $item[$schema.inputValueField] /}
				{/call}
			</div>
		{/if}

		{foreach $fieldSchema in $schema.fields}
			{let $variant kind="text"}
				{if $fieldSchema.contentRenderer}
					{$fieldSchema.contentRenderer}
				{elseif $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.contentRenderer}
					{if $fieldSchema.contentRendererMap and $fieldSchema.contentRendererMap[$item[$fieldSchema.fieldsMap.contentRenderer]]}
						{$fieldSchema.contentRendererMap[$item[$fieldSchema.fieldsMap.contentRenderer]]}
					{elseif $fieldSchema.contentRendererMap['*']}
						{$fieldSchema.contentRendererMap['*']}
					{/if}
				{/if}
			{/let}

			{delcall ClayList.Field variant="$variant"}
				{param fieldSchema: $fieldSchema /}
				{param item: $item /}
				{param spritemap: $spritemap /}
				{param value: $item[$fieldSchema.fieldName] /}
			{/delcall}
		{/foreach}

		{if $item.actionItems and $spritemap}
			<div class="autofit-col">
				{call .quickMenu}
					{param items: $item.actionItems /}
					{param spritemap: $spritemap /}
				{/call}

				{call ClayActionsDropdown.render}
					{param items: $item.actionItems /}
					{param spritemap: $spritemap /}
					{param triggerClasses: 'component-action' /}
				{/call}
			</div>
		{/if}
	</li>
{/template}

/**
 * This renders all the items in the list, iteraing over the items and its
 * possible nested items.
 */
{template .items}
	{@param items: list<?>}
	{@param schema: [
		fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			iconsMap: ?,
			iconShapesMap: ?,
			labelStylesMap: ?
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleItemToggled: any}
	{@param? groupName: string}
	{@param? selectable: bool}
	{@param? spritemap: string}

	{foreach $item in $items}
		{if $item.items}
			{let $currentGroupName kind="text"}
				{if $groupName}
					{$groupName}-
				{/if}

				{index($item)}
			{/let}

			{let $headerAttributes kind="attributes"}
				class="list-group-header-title"
				id="group-{$currentGroupName}"
			{/let}

			<li class="list-group-header">
				<h3 {$headerAttributes}>{$item.label}</h3>
			</li>

			{call .items}
				{param _handleItemToggled: $_handleItemToggled /}
				{param groupName: $currentGroupName /}
				{param items: $item.items /}
				{param schema:	$schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{else}
			{call .item}
				{param _handleItemToggled: $_handleItemToggled /}
				{param groupName: $groupName /}
				{param item: $item /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	{/foreach}
{/template}

/**
 * This renders the quick actions menu
 */
{template .quickMenu}
	{@param items: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool
	]>}
	{@param spritemap: string}

	<div class="quick-action-menu">
		{foreach $item in $items}
			{if $item.quickAction and $item.icon and $spritemap}
				{call ClayLink.render}
					{param ariaLabel: $item.label /}
					{param elementClasses: 'component-action quick-action-item' /}
					{param href: $item.href /}
					{param icon: $item.icon /}
					{param spritemap: $spritemap /}
				{/call}
			{/if}
		{/foreach}
	</div>
{/template}

/**
 * This renders the content of the item.
 */
{deltemplate ClayList.Field variant="'content'"}
	{@param fieldSchema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		iconsMap: ?,
		iconShapesMap: ?,
		labelStylesMap: ?
	]}
	{@param item: ?}
	{@param value: ?}
	{@param? spritemap: string}

	<div class="autofit-col autofit-col-expand">
		<h4 class="list-group-title text-truncate">
			{if $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.href and $item[$fieldSchema.fieldsMap.href]}
				{call ClayLink.render}
					{param href: $item[$fieldSchema.fieldsMap.href] /}
					{param label: $item[$fieldSchema.fieldsMap.title] /}
				{/call}
			{else}
				{$item[$fieldSchema.fieldsMap.title]}
			{/if}
		</h4>

		{if $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.description and $item[$fieldSchema.fieldsMap.description]}
			<p class="list-group-subtitle text-truncate">{$item[$fieldSchema.fieldsMap.description]}</p>
		{/if}

		{if $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.labels and $item[$fieldSchema.fieldsMap.labels]}
			<div class="list-group-detail">
				{foreach $label in $item[$fieldSchema.fieldsMap.labels]}
					{call ClayLabel.render}
						{param label: $label /}
						{param style: $fieldSchema.labelStylesMap ? $fieldSchema.labelStylesMap[$label] ?: $fieldSchema.labelStylesMap['*'] : null /}
					{/call}
				{/foreach}
			</div>
		{/if}
	</div>
{/deltemplate}

/**
 * This renders the icon of the item.
 */
{deltemplate ClayList.Field variant="'icon'"}
	{@param fieldSchema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		iconsMap: ?,
		iconShapesMap: ?,
		labelStylesMap: ?
	]}
	{@param item: ?}
	{@param value: ?}
	{@param? spritemap: string}

	<div class="autofit-col">
		{if $spritemap}
			{call ClaySticker.render}
				{param icon: $fieldSchema.iconsMap ? $fieldSchema.iconsMap[$value] ?: $fieldSchema.iconsMap['*'] : $value /}
				{param shape: $fieldSchema.iconShapesMap ? $fieldSchema.iconShapesMap[$value] ?: $fieldSchema.iconShapesMap['*'] : null /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	</div>
{/deltemplate}

/**
 * This renders a simple content of the item.
 */
{deltemplate ClayList.Field variant="'simple'"}
	{@param fieldSchema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		iconsMap: ?,
		iconShapesMap: ?,
		labelStylesMap: ?
	]}
	{@param item: ?}
	{@param value: ?}
	{@param? spritemap: string}

	{if $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.href and $item[$fieldSchema.fieldsMap.href]}
		{call ClayLink.render}
			{param href: $item[$fieldSchema.fieldsMap.href] /}
			{param label: $item[$fieldSchema.fieldsMap.title] /}
		{/call}
	{else}
		{$item[$fieldSchema.fieldsMap.title]}
	{/if}
{/deltemplate}
