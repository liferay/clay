{namespace ClayAutocomplete}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param dataSource: string|[]|list<?>|any}
	{@param? _dropdownWidth: number}
	{@param? _handleDataChange: any}
	{@param? _handleDataError: any}
	{@param? _handleDataLoading: any}
	{@param? _handleDropdownItemClick: any}
	{@param? _handleOnBlur: any}
	{@param? _handleOnFocus: any}
	{@param? _handleOnInput: any}
	{@param? _handleOnKeydown: any}
	{@param? _isFetching: bool}
	{@param? contentRenderer: string}
	{@param? dataProviderInitialData: []|list<?>}
	{@param? dropdownPortalElement: string}
	{@param? elementClasses: string}
	{@param? filteredItems: list<?>}
	{@param? id: string}
	{@param? inputElementClasses: string}
	{@param? inputName: string}
	{@param? inputValue: string}
	{@param? placeholder: string}
	{@param? pollingInterval: number}
	{@param? requestInputMode: string}
	{@param? requestOptions: [
		method: string,
		mode: string,
		cache: string,
		credentials: string,
		headers: [],
		redirect: string,
		referrer: string,
		body: []
	]}
	{@param? requestRetries: number}
	{@param? requestTimeout: number}
	{@param? unstable_content: html}
	{@param? useDefaultClasses: bool}
	{@param? wrapInput: bool}

	{let $attributes kind="attributes"}
		class="
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}

			{if $useDefaultClasses != false}
				{sp}input-group
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	{let $content kind="html"}
		{$unstable_content}

		{call .input}
			{param _handleOnBlur: $_handleOnBlur /}
			{param _handleOnFocus: $_handleOnFocus /}
			{param _handleOnInput: $_handleOnInput /}
			{param _handleOnKeydown: $_handleOnKeydown /}
			{param _isFetching: $_isFetching /}
			{param inputElementClasses: $inputElementClasses /}
			{param inputName: $inputName /}
			{param inputValue: $inputValue /}
			{param placeholder: $placeholder /}
			{param wrapInput: $wrapInput ?: false /}
		{/call}

		{call .dropdown}
			{param _dropdownWidth: $_dropdownWidth /}
			{param _handleDataChange: $_handleDataChange /}
			{param _handleDataError: $_handleDataError /}
			{param _handleDataLoading: $_handleDataLoading /}
			{param _handleDropdownItemClick: $_handleDropdownItemClick /}
			{param _handleOnKeydown: $_handleOnKeydown /}
			{param contentRenderer: $contentRenderer /}
			{param dataProviderInitialData: $dataProviderInitialData /}
			{param dataSource: $dataSource /}
			{param dropdownPortalElement: $dropdownPortalElement /}
			{param filteredItems: $filteredItems /}
			{param inputValue: $inputValue /}
			{param pollingInterval: $pollingInterval /}
			{param requestInputMode: $requestInputMode /}
			{param requestOptions: $requestOptions /}
			{param requestRetries: $requestRetries /}
			{param requestTimeout: $requestTimeout /}
		{/call}
	{/let}

	<div {$attributes}>
		{if $useDefaultClasses != false}
			<div class="input-group-item">
				{$content}
			</div>
		{else}
			{$content}
		{/if}
	</div>
{/template}

/**
 * This render the input tag.
 */
{template .input}
	{@param? _handleOnBlur: any}
	{@param? _handleOnFocus: any}
	{@param? _handleOnInput: any}
	{@param? _handleOnKeydown: any}
	{@param? _isFetching: bool}
	{@param? inputElementClasses: string}
	{@param? inputName: string}
	{@param? inputValue: string}
	{@param? placeholder: string}
	{@param? wrapInput: bool}

	{let $attributes kind="attributes"}
		class="
			{if $inputElementClasses}
				{$inputElementClasses}
			{else}
				form-control
			{/if}

			{if $_isFetching and not $wrapInput}
				{sp}input-group-inset input-group-inset-after
			{/if}
		"

		{if $inputName}
			id="{$inputName}"
			name="{$inputName}"
		{/if}

		onBlur="{$_handleOnBlur}"
		onFocus="{$_handleOnFocus}"
		onInput="{$_handleOnInput}"
		onKeydown="{$_handleOnKeydown}"
		ref="input"
		type="text"

		{if $placeholder}
			placeholder="{$placeholder}"
		{/if}

		{if $inputValue}
			value="{$inputValue}"
		{else}
			value=""
		{/if}
	{/let}

	{if $wrapInput}
		<span class="autofit-row">
			<span class="autofit-col autofit-col-expand">
				<input {$attributes} />
			</span>
			{if $_isFetching}
				<span class="autofit-col">
					<span class="inline-item">
						{call ClayLoadingIndicator.render}
							{param small: true /}
						{/call}
					</span>
				</span>
			{/if}
		</span>
	{else}
		<input {$attributes} />

		{if $_isFetching}
			<div class="input-group-inset-item input-group-inset-item-after">
				<span class="inline-item inline-item-middle">
					{call ClayLoadingIndicator.render}
						{param small: true /}
					{/call}
				</span>
			</div>
		{/if}
	{/if}

{/template}

/**
 * This render the dropdown content.
 */
{template .dropdown}
	{@param dataSource: string|[]|list<?>|any}
	{@param? _dropdownWidth: number}
	{@param? _handleDataChange: any}
	{@param? _handleDataError: any}
	{@param? _handleDataLoading: any}
	{@param? _handleDropdownItemClick: any}
	{@param? _handleOnKeydown: any}
	{@param? contentRenderer: string}
	{@param? dataProviderInitialData: []|list<?>}
	{@param? dropdownPortalElement: string}
	{@param? filteredItems: list<?>}
	{@param? inputValue: string}
	{@param? pollingInterval: number}
	{@param? requestInputMode: string}
	{@param? requestOptions: [
		method: string,
		mode: string,
		cache: string,
		credentials: string,
		headers: [],
		redirect: string,
		referrer: string,
		body: []
	]}
	{@param? requestRetries: number}
	{@param? requestTimeout: number}

	{let $isVisible: ($filteredItems and length($filteredItems) > 0) or $inputValue ? true : false /}

	{let $attributes kind="attributes"}
		class="autocomplete-dropdown-menu dropdown-menu
			{if $isVisible}
				{sp}show
			{/if}
		"

		data-onkeydown="{$_handleOnKeydown}"

		{if $_dropdownWidth}
			style="width: {$_dropdownWidth}px; max-width: none;"
		{/if}

		ref="dropdown"
	{/let}

	{let $dropdownContent kind="html"}
		<ul {$attributes}>
			{if $filteredItems}
				{foreach $item in $filteredItems}
					{delcall ClayAutocomplete.Item variant="$contentRenderer" allowemptydefault="true"}
						{param _handleDropdownItemClick: $_handleDropdownItemClick /}
						{param contentRenderer: $contentRenderer /}
						{param data: $item /}
						{param index: index($item) /}
					{/delcall}
				{ifempty}
					<li>
						<span class="disabled dropdown-item">
							{msg desc="It says no results were found"}
								no-results-were-found
							{/msg}
						</span>
					</li>
				{/foreach}
			{/if}
		</ul>
	{/let}

	{call ClayDataProvider.render}
		{param content kind="html"}
			{call ClayPortal.render}
				{param content: $dropdownContent /}
				{param portalElement: $dropdownPortalElement ?: '#clay_dropdown_portal' /}
				{param ref: 'portal' /}
			{/call}
		{/param}

		{param dataSource: $dataSource /}
		{param delayLoading: $filteredItems and length($filteredItems) > 0 /}
		{param errorContent kind="html"}
			{call ClayPortal.render}
				{param content kind="html"}
					<ul {$attributes}>
						<li>
							<span class="disabled dropdown-item">
								{msg desc="It says no results were found"}
									no-results-were-found
								{/msg}
							</span>
						</li>
					</ul>
				{/param}

				{param portalElement: $dropdownPortalElement ?: '#clay_dropdown_portal' /}
				{param ref: 'portal' /}
			{/call}
		{/param}

		{param events: [
			'dataChange': $_handleDataChange,
			'dataError': $_handleDataError,
			'dataLoading': $_handleDataLoading
		] /}

		{param initialData: $dataProviderInitialData /}
		{param loadingContent kind="html"}
			{call ClayPortal.render}
				{param content kind="html"}
					<ul {$attributes}>
						<li>
							<span class="disabled dropdown-item">
								{msg desc="Loading data"}
									loading
								{/msg}
								...
							</span>
						</li>
					</ul>
				{/param}

				{param portalElement: $dropdownPortalElement ?: '#clay_dropdown_portal' /}
				{param ref: 'portal' /}
			{/call}
		{/param}

		{param pollingInterval: $pollingInterval /}
		{param ref: 'dataProvider' /}
		{param requestInputMode: $requestInputMode /}
		{param requestOptions: $requestOptions /}
		{param requestRetries: $requestRetries /}
		{param requestTimeout: $requestTimeout /}
	{/call}
{/template}

/**
 * This renders the item of a dropdown
 * Extension point: Create a new variation above ClayAutocomplete.Item
 * so you can create your own markup.
 */
{deltemplate ClayAutocomplete.Item}
	{@param data: ?}
	{@param index: int}
	{@param? _handleDropdownItemClick: any}
	{@param? contentRenderer: string}

	<li>
		<a data-onclick="{$_handleDropdownItemClick}" data-dropdown-item-index="{$index}" id="item" class="dropdown-item" href="javascript:;">
			{delcall ClayAutocomplete.ItemContent variant="$contentRenderer" allowemptydefault="true"}
				{param data: $data /}
			{/delcall}
		</a>
	</li>
{/deltemplate}

/**
 * This renders the item content of a dropdown
 * Extension point: Create a new variation above ClayAutocomplete.ItemContent
 * so you can create your own markup.
 */
{deltemplate ClayAutocomplete.ItemContent}
	{@param data: ?}

	{if $data.matches and length($data.matches) > 0}
		{foreach $char in $data.matches}
			{if $char.match}
				<strong>{$char.value}</strong>
			{else}
				{$char.value}
			{/if}
		{/foreach}
	{/if}
{/deltemplate}
