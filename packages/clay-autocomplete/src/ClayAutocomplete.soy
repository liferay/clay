{namespace ClayAutocomplete}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param dataSource: string|[]|list<?>|any}
	{@param? _handleDataChange: any}
	{@param? _handleDropdownItemClick: any}
	{@param? _handleOnBlur: any}
	{@param? _handleOnFocus: any}
	{@param? _handleOnInput: any}
	{@param? _handleOnKeydown: any}
	{@param? contentRenderer: string}
	{@param? elementClasses: string}
	{@param? filteredItems: list<?>}
	{@param? id: string}
	{@param? initialData: []|list<?>}
	{@param? inputElementClasses: string}
	{@param? inputName: string}
	{@param? inputValue: string}
	{@param? requestOptions: [
		method: string,
		mode: string,
		cache: string,
		credentials: string,
		headers: [],
		redirect: string,
		referrer: string,
		body: []
	]}
	{@param? pollingInterval: number}
	{@param? requestInputMode: string}
	{@param? requestRetries: number}
	{@param? requestTimeout: number}
	{@param? unstable_content: html}

	{let $attributes kind="attributes"}
		class="dropdown-full
			{if $elementClasses}
				{sp}{$elementClasses}
			{else}
				{sp}form-group
			{/if}
		"

		data-onkeydown="{$_handleOnKeydown}"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<div {$attributes}>
		{$unstable_content}

		{call .input}
			{param _handleOnBlur: $_handleOnBlur /}
			{param _handleOnFocus: $_handleOnFocus /}
			{param _handleOnInput: $_handleOnInput /}
			{param _handleOnKeydown: $_handleOnKeydown /}
			{param inputElementClasses: $inputElementClasses /}
			{param inputName: $inputName /}
			{param inputValue: $inputValue /}
		{/call}

		{call .dropdown}
			{param _handleDataChange: $_handleDataChange /}
			{param _handleDropdownItemClick: $_handleDropdownItemClick /}
			{param contentRenderer: $contentRenderer /}
			{param dataSource: $dataSource /}
			{param filteredItems: $filteredItems /}
			{param initialData: $initialData /}
			{param requestOptions: $requestOptions /}
			{param pollingInterval: $pollingInterval /}
			{param requestRetries: $requestRetries /}
			{param requestInputMode: $requestInputMode /}
			{param requestTimeout: $requestTimeout /}
		{/call}
	</div>
{/template}

/**
 * This render the input tag.
 */
{template .input}
	{@param? _handleOnBlur: any}
	{@param? _handleOnFocus: any}
	{@param? _handleOnInput: any}
	{@param? _handleOnKeydown: any}
	{@param? inputElementClasses: string}
	{@param? inputName: string}
	{@param? inputValue: string}

	{let $attributes kind="attributes"}
		class="
			{if $inputElementClasses}
				{$inputElementClasses}
			{else}
				form-control
			{/if}
		"

		{if $inputName}
			id="{$inputName}"
			name="{$inputName}"
		{/if}

		onBlur="{$_handleOnBlur}"
		onFocus="{$_handleOnFocus}"
		onInput="{$_handleOnInput}"
		onKeydown="{$_handleOnKeydown}"
		ref="input"
		type="text"

		{if $inputValue}
			value="{$inputValue}"
		{else}
			value=""
		{/if}
	{/let}

	<input {$attributes} />
{/template}

/**
 * This render the dropdown content.
 */
{template .dropdown}
	{@param dataSource: string|[]|list<?>|any}
	{@param? _handleDataChange: any}
	{@param? _handleDropdownItemClick: any}
	{@param? contentRenderer: string}
	{@param? filteredItems: list<?>}
	{@param? initialData: []|list<?>}
	{@param? requestOptions: [
		method: string,
		mode: string,
		cache: string,
		credentials: string,
		headers: [],
		redirect: string,
		referrer: string,
		body: []
	]}
	{@param? pollingInterval: number}
	{@param? requestInputMode: string}
	{@param? requestRetries: number}
	{@param? requestTimeout: number}

	{let $isVisible: $filteredItems and length($filteredItems) > 0 ? true : false /}

	{let $classes kind="text"}
		dropdown-menu
		{if $isVisible}
			{sp}show
		{/if}
	{/let}

	{call ClayDataProvider.render}
		{param content kind="html"}
			<ul class="{$classes}" ref="dropdown">
				{if $filteredItems}
					{foreach $item in $filteredItems}
						{delcall ClayAutocomplete.Item variant="$contentRenderer" allowemptydefault="true"}
							{param _handleDropdownItemClick: $_handleDropdownItemClick /}
							{param data: $item /}
							{param index: index($item) /}
						{/delcall}
					{/foreach}
				{/if}
			</ul>
		{/param}

		{param dataSource: $dataSource /}
		{param events: ['dataChange': $_handleDataChange] /}
		{param initialData: $initialData /}
		{param ref: 'dataProvider' /}
		{param requestOptions: $requestOptions /}
		{param pollingInterval: $pollingInterval /}
		{param requestRetries: $requestRetries /}
		{param requestInputMode: $requestInputMode /}
		{param requestTimeout: $requestTimeout /}
	{/call}
{/template}

/**
 * This renders the item content of a dropdown
 * Extension point: Create a new variation above ClayAutocomplete.Item
 * so you can create your own markup.
 */
{deltemplate ClayAutocomplete.Item}
	{@param data: ?}
	{@param index: int}
	{@param? _handleDropdownItemClick: any}

	<li>
		<a data-onclick="{$_handleDropdownItemClick}" data-dropdown-item-index="{$index}" id="item" class="dropdown-item" href="javascript:;">
			{if $data.matches and length($data.matches) > 0}
				{foreach $char in $data.matches}
					{if $char.match}
						<strong>{$char.value}</strong>
					{else}
						{$char.value}
					{/if}
				{/foreach}
			{/if}
		</a>
	</li>
{/deltemplate}