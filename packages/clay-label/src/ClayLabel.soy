{namespace ClayLabel}

/**
 * This renders a label.
 */
{template .render}
	{@param? _handleCloseButtonClick: any}
	{@param? closeable: bool}
	{@param? elementClasses: string}
	{@param? href: string}
	{@param? id: string}
	{@param? label: html|string}
	{@param? size: string}
	{@param? spritemap: string}
	{@param? style: bool|string}

	{let $attributes kind="attributes"}
		class="label
			{if isNonnull($style) and $style != true and $style != false}
				{sp}label-{$style}
			{elseif not isNonnull($style) or $style == true}
				{sp}label-secondary
			{/if}

			{if $closeable}
				{sp}label-dismissible
			{/if}

			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}

			{if $size}
				{sp}label-{$size}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<span {$attributes}>
		{call .content}
			{param _handleCloseButtonClick: $_handleCloseButtonClick /}
			{param closeable: $closeable /}
			{param href: $href /}
			{param label: $label /}
			{param spritemap: $spritemap /}
		{/call}
	</span>
{/template}

/**
 * Render icon and label content.
 */
{template .content}
	{@param? _handleCloseButtonClick: any}
	{@param? closeable: bool}
	{@param? href: string}
	{@param? label: html|string}
	{@param? spritemap: string}

	{let $labelContent kind="html"}
		<span class="label-item label-item-expand">
			{if $href}
				{call ClayLink.render}
					{param href: $href /}
					{param label: $label /}
				{/call}
			{else}
				{$label}
			{/if}
		</span>
	{/let}

	{if $closeable and $spritemap}
		{$labelContent}

		<span class="label-item label-item-after">
			{call ClayButton.render}
				{param ariaLabel kind="text"}
					{msg desc="The word 'Close' used as a verb"}
						close
					{/msg}
				{/param}

				{param elementClasses: 'close' /}
				{param events: [ 'click': $_handleCloseButtonClick] /}
				{param icon: 'times' /}
				{param iconAlignment: 'right' /}
				{param ref: 'closeButton' /}
				{param spritemap: $spritemap /}
				{param style: false /}
				{param type: 'button' /}
			{/call}
		</span>
	{else}
		{$labelContent}
	{/if}
{/template}
