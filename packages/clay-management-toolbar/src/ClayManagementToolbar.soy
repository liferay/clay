{namespace ClayManagementToolbar}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param spritemap: string}
	{@param? _handleActionItemClicked: any}
	{@param? _handleClearResultsClick: any}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuItemClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? _handleFilterDoneButtonClick: any}
	{@param? _handleFilterItemClicked: any}
	{@param? _handleFilterLabelCloseClicked: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleOpenMobileSearchClick: any}
	{@param? _handleQuickActionClicked: any}
	{@param? _handleSearchSearchClick: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? _handleSortingButtonClicked: any}
	{@param? _handleViewTypeClicked: any}
	{@param? _showSearchMobile: bool}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? clearResultsURL: string}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}
	{@param? customData: ?}
	{@param? disabled: bool}
	{@param? elementClasses: string}
	{@param? filterItems: list<[
		active: bool,
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		items: list<[
			active: bool,
			checked: bool,
			disabled: bool,
			inputName: string,
			inputValue: string,
			label: string,
			separator: bool,
			type: string
		]>,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? filterLabels: list<[
		closeable: bool,
		label: html|string
	]>}
	{@param? id: string}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? searchInputPlaceholder: string}
	{@param? searchValue: string}
	{@param? selectable: bool}
	{@param? selectedItems: number}
	{@param? showAdvancedSearch: bool}
	{@param? showCreationMenu: bool}
	{@param? showFiltersDoneButton: bool}
	{@param? showInfoButton: bool}
	{@param? showSearch: bool}
	{@param? sortingOrder: string}
	{@param? sortingURL: string}
	{@param? totalItems: number}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		href: string,
		icon: string,
		label: string
	]>}

	{let $attributes kind="attributes"}
		{if $elementClasses}
			class="{$elementClasses}"
		{/if}

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	{let $isActive: $selectedItems and $selectedItems > 0 /}

	<div {$attributes}>
		{if $isActive}
			{call .active}
				{param _handleActionItemClicked: $_handleActionItemClicked /}
				{param _handleInfoButtonClicked: $_handleInfoButtonClicked /}
				{param _handleQuickActionClicked: $_handleQuickActionClicked /}
				{param _handleSelectPageCheckboxChanged: $_handleSelectPageCheckboxChanged /}
				{param actionItems: $actionItems /}
				{param selectedItems: $selectedItems /}
				{param showInfoButton: $showInfoButton /}
				{param spritemap: $spritemap /}
				{param totalItems: $totalItems /}
			{/call}
		{else}
			{call .default}
				{param _handleClearResultsClick: $_handleClearResultsClick /}
				{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
				{param _handleCreationButtonClicked: $_handleCreationButtonClicked /}
				{param _handleCreationMenuItemClicked: $_handleCreationMenuItemClicked /}
				{param _handleCreationMenuMoreButtonClicked: $_handleCreationMenuMoreButtonClicked /}
				{param _handleFilterDoneButtonClick: $_handleFilterDoneButtonClick /}
				{param _handleFilterItemClicked: $_handleFilterItemClicked /}
				{param _handleInfoButtonClicked: $_handleInfoButtonClicked /}
				{param _handleOpenMobileSearchClick: $_handleOpenMobileSearchClick /}
				{param _handleSearchSearchClick: $_handleSearchSearchClick /}
				{param _handleSelectPageCheckboxChanged: $_handleSelectPageCheckboxChanged /}
				{param _handleSortingButtonClicked: $_handleSortingButtonClicked /}
				{param _handleViewTypeClicked: $_handleViewTypeClicked /}
				{param _showSearchMobile: $_showSearchMobile /}
				{param contentRenderer: $contentRenderer ?: '' /}
				{param creationMenu: $creationMenu /}
				{param customData: $customData /}
				{param disabled: $disabled /}
				{param filterItems: $filterItems /}
				{param searchActionURL: $searchActionURL /}
				{param searchFormMethod: $searchFormMethod /}
				{param searchFormName: $searchFormName /}
				{param searchInputName: $searchInputName /}
				{param searchInputPlaceholder: $searchInputPlaceholder /}
				{param searchValue: $searchValue /}
				{param selectable: $selectable /}
				{param showAdvancedSearch: $showAdvancedSearch /}
				{param showCreationMenu: $showCreationMenu ?: true /}
				{param showFiltersDoneButton: $showFiltersDoneButton ?: true /}
				{param showInfoButton: $showInfoButton /}
				{param showSearch: $showSearch != false /}
				{param sortingOrder: $sortingOrder /}
				{param sortingURL: $sortingURL /}
				{param spritemap: $spritemap /}
				{param viewTypes: $viewTypes /}
			{/call}
		{/if}

		{let $isResultsBar: isNonnull($totalItems) and ($searchValue or $filterLabels) /}

		{if $isResultsBar}
			{call ClayResultsBar.render}
				{param _handleClearResultsClick: $_handleClearResultsClick /}
				{param clearResultsURL: $clearResultsURL /}
				{param events: ['filterLabelCloseClicked': $_handleFilterLabelCloseClicked] /}
				{param filterLabels: $filterLabels /}
				{param ref: 'resultsBar' /}
				{param searchValue: $searchValue /}
				{param spritemap: $spritemap /}
				{param totalItems: $totalItems ?: 0 /}
			{/call}
		{/if}
	</div>
{/template}

/**
 * This renders the component's active content.
 */
{template .active}
	{@param spritemap: string}
	{@param? _handleActionItemClicked: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleQuickActionClicked: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? selectedItems: number}
	{@param? showInfoButton: bool}
	{@param? totalItems: number}

	<nav class="management-bar management-bar-primary navbar navbar-expand-md navbar-nowrap">
		<div class="container-fluid container-fluid-max-xl">
			<ul class="navbar-nav navbar-nav-expand">
				<li class="nav-item">
					{call ClayCheckbox.render}
						{param checked: true /}
						{param events: ['change': $_handleSelectPageCheckboxChanged] /}
						{param indeterminate: $selectedItems < $totalItems /}
						{param label kind="text"}
							{msg desc="Select items checkbox label"}
								select-items
							{/msg}
						{/param}

						{param ref: 'selectPageCheckbox' /}
						{param showLabel: false /}
					{/call}
				</li>
				<li class="nav-item">
					<span class="navbar-text">
						{msg desc="Says how many items of the total are selected"}
							{$selectedItems}-of-{$totalItems}
						{/msg}
						{sp}
						<span class="navbar-breakpoint-down-d-none">
							{msg desc="Items selected"}
								items-selected
							{/msg}
						</span>
					</span>
				</li>
			</ul>

			{if $actionItems or $showInfoButton}
				<ul class="navbar-nav">
					{if $showInfoButton}
						<li class="nav-item">
							{call ClayButton.render}
								{param elementClasses: 'nav-link nav-link-monospaced' /}
								{param events: ['click': $_handleInfoButtonClicked] /}
								{param icon: 'info-circle-open' /}
								{param ref: 'infoButton' /}
								{param spritemap: $spritemap /}
								{param style: 'unstyled' /}
								{param title kind="text"}
									{msg desc=""}
										info
									{/msg}
								{/param}
							{/call}
						</li>
					{/if}

					{if $actionItems}
						{foreach $item in $actionItems}
							{if $item.quickAction and $item.icon and $spritemap}
								<li class="nav-item navbar-breakpoint-down-d-none" data-quick-action-index="{index($item)}" data-onclick="{$_handleQuickActionClicked}">
									{if isNonnull($item.href)}
										{call ClayLink.render}
											{param elementClasses kind="text"}
												nav-link nav-link-monospaced

												{if $item.disabled}
													{sp}disabled
												{/if}
											{/param}

											{param href kind="text"}
												{if $item.disabled}
													javascript:;
												{else}
													{$item.href}
												{/if}
											{/param}

											{param icon: $item.icon /}
											{param ref: 'quickAction' + index($item) /}
											{param spritemap: $spritemap /}
											{param title: $item.label /}
										{/call}
									{else}
										{call ClayButton.render}
											{param disabled: $item.disabled /}
											{param elementClasses: 'nav-link nav-link-monospaced' /}
											{param icon: $item.icon /}
											{param ref: 'quickAction' + index($item) /}
											{param spritemap: $spritemap /}
											{param style: 'unstyled' /}
											{param title: $item.label /}
										{/call}
									{/if}
								</li>
							{/if}
						{/foreach}

						<li class="nav-item">
							{call ClayActionsDropdown.render}
								{param events: ['itemClicked': $_handleActionItemClicked] /}
								{param items: $actionItems /}
								{param spritemap: $spritemap /}
								{param triggerClasses: 'nav-link nav-link-monospaced' /}
							{/call}
						</li>
					{/if}
				</ul>
			{/if}
		</div>
	</nav>
{/template}

/**
 * This renders the creation menu.
 */
{template .creationMenu}
	{@param spritemap: string}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuItemClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}

	{if $creationMenu and $creationMenu.primaryItems and length($creationMenu.primaryItems) == 1 and not $creationMenu.secondaryItems}
		{let $item: $creationMenu.primaryItems[0] /}

		{if $item.href}
			{call ClayLink.render}
				{param ariaLabel: $item.label /}
				{param buttonStyle: 'primary' /}
				{param elementClasses: 'nav-btn nav-btn-monospaced' /}
				{param href: $item.href /}
				{param icon: 'plus' /}
				{param spritemap: $spritemap /}
				{param title: $item.label /}
			{/call}
		{else}
			{call ClayButton.render}
				{param elementClasses: 'nav-btn nav-btn-monospaced' /}
				{param events: ['click': $_handleCreationButtonClicked ] /}
				{param icon: 'plus' /}
				{param ref: 'creationMenu' /}
				{param spritemap: $spritemap /}
				{param title: $item.label /}
			{/call}
		{/if}
	{elseif $creationMenu and $creationMenu.primaryItems}
		{call ClayCreationMenuDropdown.render}
			{param caption: $creationMenu.caption /}
			{param events: [
				'itemClicked': $_handleCreationMenuItemClicked,
				'moreButtonClicked': $_handleCreationMenuMoreButtonClicked
			] /}
			{param helpText: $creationMenu.helpText /}
			{param maxPrimaryItems: $creationMenu.maxPrimaryItems /}
			{param maxSecondaryItems: $creationMenu.maxSecondaryItems /}
			{param maxTotalItems: $creationMenu.maxTotalItems /}
			{param primaryItems: $creationMenu.primaryItems /}
			{param ref: 'creationMenuDropdown' /}
			{param secondaryItems: $creationMenu.secondaryItems /}
			{param spritemap: $spritemap /}
			{param triggerClasses: 'nav-btn nav-btn-monospaced' /}
			{param viewMoreURL: $creationMenu.viewMoreURL /}
		{/call}
	{else}
		{call ClayButton.render}
			{param elementClasses: 'nav-btn nav-btn-monospaced' /}
			{param events: ['click': $_handleCreationButtonClicked ] /}
			{param icon: 'plus' /}
			{param ref: 'creationMenu' /}
			{param spritemap: $spritemap /}
			{param title kind="text"}
				{msg desc=""}
					new
				{/msg}
			{/param}
		{/call}
	{/if}
{/template}

/**
 * This renders the component's active content.
 */
{template .default}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuItemClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? _handleFilterDoneButtonClick: any}
	{@param? _handleFilterItemClicked: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleOpenMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? _handleSortingButtonClicked: any}
	{@param? _handleViewTypeClicked: any}
	{@param? _showSearchMobile: bool}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}
	{@param? customData: ?}
	{@param? disabled: bool}
	{@param? filterItems: list<[
		active: bool,
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		items: list<[
			active: bool,
			checked: bool,
			disabled: bool,
			inputName: string,
			inputValue: string,
			label: string,
			separator: bool,
			type: string
		]>,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? searchInputPlaceholder: string}
	{@param? searchValue: string}
	{@param? selectable: bool}
	{@param? showAdvancedSearch: bool}
	{@param? showCreationMenu: bool}
	{@param? showFiltersDoneButton: bool}
	{@param? showInfoButton: bool}
	{@param? showSearch: bool}
	{@param? sortingOrder: string}
	{@param? sortingURL: string}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		href: string,
		icon: string,
		label: string
	]>}

	<nav class="management-bar management-bar-light navbar navbar-expand-md">
		{let $onlySearch: $showSearch and not $creationMenu and not $selectable and not $filterItems and not $sortingOrder and not $viewTypes /}

		<div class="container-fluid container-fluid-max-xl">
			<ul class="navbar-nav">
				{if $selectable}
					<li class="nav-item">
						{call ClayCheckbox.render}
							{param disabled: $disabled /}
							{param events: ['change': $_handleSelectPageCheckboxChanged] /}
							{param label kind="text"}
								{msg desc="Select items checkbox label"}
									select-items
								{/msg}
							{/param}

							{param ref: 'selectPageCheckbox' /}
							{param showLabel: not $filterItems and not $sortingOrder and not $showSearch /}
						{/call}
					</li>
				{/if}

				{if $filterItems}
					{let $filtersTrigger kind="html"}
						<span class="navbar-breakpoint-down-d-none">
							{msg desc="Filters and order dropdown trigger label"}
								filter-and-order
							{/msg}

							{call ClayIcon.render}
								{param elementClasses: 'inline-item inline-item-after' /}
								{param spritemap: $spritemap /}
								{param symbol: 'caret-bottom' /}
							{/call}
						</span>

						<span class="navbar-breakpoint-d-none">
							{call ClayIcon.render}
								{param spritemap: $spritemap /}
								{param symbol: 'filter' /}
							{/call}
						</span>
					{/let}

					<li class="dropdown nav-item">
						{let $doneString kind="text"}
							{msg desc="Done"}
								done
							{/msg}
						{/let}

						{call ClayDropdownBase.render}
							{param button: $showFiltersDoneButton ? [
								'label': $doneString
							] : null /}
							{param disabled: $disabled /}
							{param events: [
								'buttonClicked': $_handleFilterDoneButtonClick,
								'itemClicked': $_handleFilterItemClicked,
							] /}
							{param items: $filterItems /}
							{param label: $filtersTrigger /}
							{param ref: 'filtersDropdown' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link' /}
						{/call}
					</li>
				{/if}

				{if $sortingOrder}
					<li class="nav-item">
						{let $sortingClasses kind="text"}
							nav-link nav-link-monospaced
							{if $sortingOrder == 'desc'}
								{sp}order-arrow-down-active
							{else}
								{sp}order-arrow-up-active
							{/if}
						{/let}

						{if $sortingURL and not $disabled}
							{call ClayLink.render}
								{param elementClasses: $sortingClasses /}
								{param events: ['click': $_handleSortingButtonClicked] /}
								{param href: $sortingURL /}
								{param icon: 'order-arrow' /}
								{param ref: 'sortingButton' /}
								{param spritemap: $spritemap /}
								{param title kind="text"}
									{if $sortingOrder == 'desc'}
										{msg desc=""}
											ascending
										{/msg}
									{else}
										{msg desc=""}
											descending
										{/msg}
									{/if}
								{/param}
							{/call}
						{else}
							{call ClayButton.render}
								{param disabled: $disabled /}
								{param elementClasses: $sortingClasses /}
								{param events: ['click': $_handleSortingButtonClicked] /}
								{param icon: 'order-arrow' /}
								{param ref: 'sortingButton' /}
								{param spritemap: $spritemap /}
								{param style: 'unstyled' /}
								{param title kind="text"}
									{msg desc=""}
										order
									{/msg}
								{/param}
							{/call}
						{/if}
					</li>
				{/if}
			</ul>

			{if $showSearch}
				{let $searchClasses kind="text"}
					navbar-form navbar-form-autofit
					{if not $onlySearch}
						{sp}navbar-overlay navbar-overlay-sm-down
						{if $_showSearchMobile}
							{sp}show
						{/if}
					{/if}
				{/let}

				<div class="{$searchClasses}">
					{delcall ClayManagementToolbar.SearchForm variant="$contentRenderer"}
						{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
						{param _handleSearchSearchClick: $_handleSearchSearchClick /}
						{param customData: $customData /}
						{param disabled: $disabled and not $searchValue /}
						{param onlySearch: $onlySearch /}
						{param searchActionURL: $searchActionURL /}
						{param searchFormMethod: $searchFormMethod /}
						{param searchFormName: $searchFormName /}
						{param searchInput kind="html"}
							{call .searchInput}
								{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
								{param _handleSearchSearchClick: $_handleSearchSearchClick /}
								{param contentRenderer: $contentRenderer /}
								{param disabled: $disabled and not $searchValue/}
								{param onlySearch: $onlySearch /}
								{param searchInputName: $searchInputName /}
								{param searchInputPlaceholder: $searchInputPlaceholder /}
								{param searchValue: $searchValue /}
								{param showAdvancedSearch: $showAdvancedSearch /}
								{param spritemap: $spritemap /}
							{/call}
						{/param}
						{param searchInputName: $searchInputName /}
						{param searchValue: $searchValue /}
						{param spritemap: $spritemap /}
					{/delcall}
				</div>
			{/if}

			<ul class="navbar-nav">
				{if $showSearch and not $onlySearch}
					<li class="nav-item navbar-breakpoint-d-none">
						{call ClayButton.render}
							{param disabled: $disabled /}
							{param elementClasses: 'nav-link nav-link-monospaced' /}
							{param events: ['click': $_handleOpenMobileSearchClick] /}
							{param icon: 'search' /}
							{param spritemap: $spritemap /}
							{param style: 'unstyled' /}
						{/call}
					</li>
				{/if}

				{if $showInfoButton}
					<li class="nav-item">
						{call ClayButton.render}
							{param elementClasses: 'nav-link nav-link-monospaced' /}
							{param events: ['click': $_handleInfoButtonClicked] /}
							{param icon: 'info-circle-open' /}
							{param ref: 'infoButton' /}
							{param spritemap: $spritemap /}
							{param style: 'unstyled' /}
							{param title kind="text"}
								{msg desc=""}
									info
								{/msg}
							{/param}
						{/call}
					</li>
				{/if}

				{if $viewTypes}
					<li class="dropdown nav-item">
						{call ClayDropdown.render}
							{param events: ['itemClicked': $_handleViewTypeClicked] /}
							{param icon kind="text"}
								{foreach $viewType in $viewTypes}
									{if $viewType.active}
										{$viewType.icon}
									{/if}
								{/foreach}
							{/param}
							{param items: $viewTypes /}
							{param itemsIconAlignment: 'left' /}
							{param ref: 'viewTypesDropdown' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link nav-link-monospaced' /}
							{param triggerTitle kind="text"}
								{msg desc=""}
									display-style
								{/msg}
							{/param}
						{/call}
					</li>
				{/if}

				{if $showCreationMenu}
					<li class="nav-item">
						{call .creationMenu}
							{param _handleCreationButtonClicked: $_handleCreationButtonClicked /}
							{param _handleCreationMenuItemClicked: $_handleCreationMenuItemClicked /}
							{param _handleCreationMenuMoreButtonClicked: $_handleCreationMenuMoreButtonClicked /}
							{param creationMenu: $creationMenu /}
							{param spritemap: $spritemap /}
						{/call}
					</li>
				{/if}
			</ul>
		</div>
	</nav>
{/template}

/**
 * This renders the search main input.
 */
{template .searchInput}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? contentRenderer: string}
	{@param? disabled: bool}
	{@param? onlySearch: bool}
	{@param? searchInputName: string}
	{@param? searchInputPlaceholder: string}
	{@param? searchValue: string}
	{@param? showAdvancedSearch: bool}

	<div class="input-group">
		<div class="input-group-item">
			{let $inputAttributes kind="attributes"}
				aria-label="Search"
				{if $disabled}
					disabled
				{/if}

				class="form-control input-group-inset input-group-inset-after"
				name="{$searchInputName}"
				{if $searchInputPlaceholder}
					placeholder="{$searchInputPlaceholder}"
				{else}
					placeholder="
						{msg desc="Search text input placeholder"}
							search-for
						{/msg}"
				{/if}
				ref="search"
				type="text"

				{if $searchValue}
					value="{$searchValue}"
				{/if}
			{/let}

			<input {$inputAttributes} />

			<span class="input-group-inset-item input-group-inset-item-after">
				{if not $onlySearch}
					{call ClayButton.render}
						{param elementClasses: 'navbar-breakpoint-d-none' /}
						{param events: ['click': $_handleCloseMobileSearchClick] /}
						{param icon: 'times' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
					{/call}
				{/if}

				{call ClayButton.render}
					{param disabled: $disabled /}
					{param events: ['click': $_handleSearchSearchClick] /}
					{param icon: 'search' /}
					{param ref: 'searchButton' /}
					{param spritemap: $spritemap /}
					{param style: 'unstyled' /}
					{param type: 'submit' /}
				{/call}

				{if $showAdvancedSearch}
					{call ClayDropdown.render}
						{param contentRenderer: $contentRenderer /}
						{param icon: 'angle-down' /}
						{param items: [] /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</span>
		</div>
	</div>
{/template}

/**
 * This renders the search form.
 */
{deltemplate ClayManagementToolbar.SearchForm}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? customData: ?}
	{@param? disabled: bool}
	{@param? onlySearch: bool}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInput: html}
	{@param? searchInputName: string}
	{@param? searchValue: string}

	{let $searchFormContent kind="html"}
		{let $searchFormAttributes kind="attributes"}
			{if $searchActionURL}
				action="{$searchActionURL}"
			{/if}

			method="{$searchFormMethod ?: 'GET'}"

			{if $searchFormName}
				name="{$searchFormName}"
			{/if}

			role="search"
		{/let}

		<form {$searchFormAttributes}>
			{$searchInput}
		</form>
	{/let}

	{if $onlySearch}
		{$searchFormContent}
	{else}
		<div class="container-fluid container-fluid-max-xl">
			{$searchFormContent}
		</div>
	{/if}
{/deltemplate}
