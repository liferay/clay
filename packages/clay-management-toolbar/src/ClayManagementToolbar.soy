{namespace ClayManagementToolbar}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param spritemap: string}
	{@param? _handleActionClicked: any}
	{@param? _handleClearResultsClick: any}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? _handleDeselectAllClicked: any}
	{@param? _handleFilterDoneButtonClick: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleOpenMobileSearchClick: any}
	{@param? _handleQuickActionClicked: any}
	{@param? _handleSearchSearchClick: any}
	{@param? _handleSelectAllClicked: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? _handleSortingButtonClicked: any}
	{@param? _handleViewTypeClicked: any}
	{@param? _showSearchMobile: bool}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? clearResultsURL: string}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}
	{@param? disabled: bool}
	{@param? elementClasses: string}
	{@param? filterItems: list<[
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? id: string}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? searchValue: string}
	{@param? selectable: bool}
	{@param? selectedItems: number}
	{@param? showAdvancedSearch: bool}
	{@param? showCreationMenu: bool}
	{@param? showFiltersDoneButton: bool}
	{@param? showInfoButton: bool}
	{@param? showSearch: bool}
	{@param? sortingOrder: string}
	{@param? sortingURL: string}
	{@param? totalItems: number}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		href: string,
		icon: string,
		label: string
	]>}

	{let $attributes kind="attributes"}
		{if $elementClasses}
			class="{$elementClasses}"
		{/if}

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	{let $isActive: $selectedItems and $selectedItems > 0 /}

	<div {$attributes}>
		{if $isActive}
			{call .active}
				{param _handleActionClicked: $_handleActionClicked /}
				{param _handleDeselectAllClicked: $_handleDeselectAllClicked /}
				{param _handleInfoButtonClicked: $_handleInfoButtonClicked /}
				{param _handleQuickActionClicked: $_handleQuickActionClicked /}
				{param _handleSelectAllClicked: $_handleSelectAllClicked /}
				{param _handleSelectPageCheckboxChanged: $_handleSelectPageCheckboxChanged /}
				{param actionItems: $actionItems /}
				{param selectedItems: $selectedItems /}
				{param showInfoButton: $showInfoButton /}
				{param spritemap: $spritemap /}
				{param totalItems: $totalItems /}
			{/call}
		{else}
			{call .default}
				{param _handleClearResultsClick: $_handleClearResultsClick /}
				{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
				{param _handleCreationButtonClicked: $_handleCreationButtonClicked /}
				{param _handleCreationMenuMoreButtonClicked: $_handleCreationMenuMoreButtonClicked /}
				{param _handleFilterDoneButtonClick: $_handleFilterDoneButtonClick /}
				{param _handleInfoButtonClicked: $_handleInfoButtonClicked /}
				{param _handleOpenMobileSearchClick: $_handleOpenMobileSearchClick /}
				{param _handleSearchSearchClick: $_handleSearchSearchClick /}
				{param _handleSelectPageCheckboxChanged: $_handleSelectPageCheckboxChanged /}
				{param _handleSortingButtonClicked: $_handleSortingButtonClicked /}
				{param _handleViewTypeClicked: $_handleViewTypeClicked /}
				{param _showSearchMobile: $_showSearchMobile /}
				{param contentRenderer: $contentRenderer ?: '' /}
				{param creationMenu: $creationMenu /}
				{param disabled: $disabled /}
				{param filterItems: $filterItems /}
				{param searchActionURL: $searchActionURL /}
				{param searchFormMethod: $searchFormMethod /}
				{param searchFormName: $searchFormName /}
				{param searchInputName: $searchInputName /}
				{param searchValue: $searchValue /}
				{param selectable: $selectable /}
				{param showAdvancedSearch: $showAdvancedSearch /}
				{param showCreationMenu: $showCreationMenu ?: true /}
				{param showFiltersDoneButton: $showFiltersDoneButton ?: true /}
				{param showInfoButton: $showInfoButton /}
				{param showSearch: $showSearch != false /}
				{param sortingOrder: $sortingOrder /}
				{param sortingURL: $sortingURL /}
				{param spritemap: $spritemap /}
				{param viewTypes: $viewTypes /}
			{/call}
		{/if}

		{if $searchValue}
			{call .resultsBar}
				{param _handleClearResultsClick: $_handleClearResultsClick /}
				{param clearResultsURL: $clearResultsURL /}
				{param searchValue: $searchValue /}
				{param totalItems: $totalItems ?: 0 /}
			{/call}
		{/if}
	</div>
{/template}

/**
 * This renders the component's active content.
 */
{template .active}
	{@param spritemap: string}
	{@param? _handleActionClicked: any}
	{@param? _handleDeselectAllClicked: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleQuickActionClicked: any}
	{@param? _handleSelectAllClicked: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? selectedItems: number}
	{@param? showInfoButton: bool}
	{@param? totalItems: number}

	<nav class="management-bar management-bar-primary navbar navbar-expand-md navbar-nowrap">
		<div class="container-fluid container-fluid-max-xl">
			<ul class="navbar-nav navbar-nav-expand">
				<li class="nav-item">
					{call ClayCheckbox.render}
						{param checked: true /}
						{param events: ['change': $_handleSelectPageCheckboxChanged] /}
						{param indeterminate: $selectedItems < $totalItems /}
						{param label: 'Select Page' /}
						{param ref: 'selectPageCheckbox' /}
						{param showLabel: false /}
					{/call}
				</li>
				<li class="nav-item">
					<span class="navbar-text">
						{$selectedItems} of {$totalItems}{sp}
						<span class="navbar-breakpoint-down-d-none">items selected</span>
					</span>
				</li>
				<li class="nav-item nav-item-shrink">
					{if $selectedItems < $totalItems}
						{call ClayButton.render}
							{param elementClasses: 'nav-btn' /}
							{param events: ['click': $_handleSelectAllClicked] /}
							{param label: 'Select all' /}
							{param ref: 'selectAllButton' /}
							{param style: 'link' /}
						{/call}
					{else}
						{call ClayButton.render}
							{param elementClasses: 'nav-btn' /}
							{param events: ['click': $_handleDeselectAllClicked] /}
							{param label: 'Deselect all' /}
							{param ref: 'deselectAllButton' /}
							{param style: 'link' /}
						{/call}
					{/if}
				</li>
			</ul>

			{if $actionItems or $showInfoButton}
				<ul class="navbar-nav">
					{if $showInfoButton}
						<li class="nav-item">
							{call ClayButton.render}
								{param elementClasses: 'nav-link nav-link-monospaced' /}
								{param events: ['click': $_handleInfoButtonClicked] /}
								{param icon: 'info-circle-open' /}
								{param ref: 'infoButton' /}
								{param spritemap: $spritemap /}
								{param style: 'unstyled' /}
							{/call}
						</li>
					{/if}

					{if $actionItems}
						{foreach $item in $actionItems}
							{if $item.quickAction and $item.icon and $spritemap}
								<li class="nav-item navbar-breakpoint-down-d-none" data-onclick="{$_handleQuickActionClicked}">
									{if isNonnull($item.href)}
										{call ClayLink.render}
											{param elementClasses: 'nav-link nav-link-monospaced' /}
											{param href: $item.href /}
											{param icon: $item.icon /}
											{param ref: 'quickAction' + index($item) /}
											{param spritemap: $spritemap /}
										{/call}
									{else}
										{call ClayButton.render}
											{param elementClasses: 'nav-link nav-link-monospaced' /}
											{param icon: $item.icon /}
											{param ref: 'quickAction' + index($item) /}
											{param spritemap: $spritemap /}
											{param style: 'unstyled' /}
										{/call}
									{/if}
								</li>
							{/if}
						{/foreach}

						<li class="nav-item">
							{call ClayActionsDropdown.render}
								{param events: ['itemClicked': $_handleActionClicked] /}
								{param items: $actionItems /}
								{param spritemap: $spritemap /}
								{param triggerClasses: 'nav-link nav-link-monospaced' /}
							{/call}
						</li>
					{/if}
				</ul>
			{/if}
		</div>
	</nav>
{/template}

/**
 * This renders the creation menu.
 */
{template .creationMenu}
	{@param spritemap: string}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}

	{if $creationMenu and $creationMenu.primaryItems and length($creationMenu.primaryItems) == 1 and not $creationMenu.secondaryItems}
		{let $item: $creationMenu.primaryItems[0] /}

		{call ClayLink.render}
			{param ariaLabel: $item.label /}
			{param buttonStyle: 'primary' /}
			{param elementClasses: 'nav-btn nav-btn-monospaced' /}
			{param href: $item.href /}
			{param icon: 'plus' /}
			{param spritemap: $spritemap /}
		{/call}
	{elseif $creationMenu and $creationMenu.primaryItems}
		{call ClayCreationMenuDropdown.render}
			{param caption: $creationMenu.caption /}
			{param events: ['moreButtonClicked': $_handleCreationMenuMoreButtonClicked] /}
			{param helpText: $creationMenu.helpText /}
			{param maxPrimaryItems: $creationMenu.maxPrimaryItems /}
			{param maxSecondaryItems: $creationMenu.maxSecondaryItems /}
			{param maxTotalItems: $creationMenu.maxTotalItems /}
			{param primaryItems: $creationMenu.primaryItems /}
			{param ref: 'creationMenuDropdown' /}
			{param secondaryItems: $creationMenu.secondaryItems /}
			{param spritemap: $spritemap /}
			{param triggerClasses: 'nav-btn nav-btn-monospaced' /}
			{param viewMoreURL: $creationMenu.viewMoreURL /}
		{/call}
	{else}
		{call ClayButton.render}
			{param elementClasses: 'nav-btn nav-btn-monospaced' /}
			{param events: ['click': $_handleCreationButtonClicked ] /}
			{param icon: 'plus' /}
			{param ref: 'creationMenu' /}
			{param spritemap: $spritemap /}
		{/call}
	{/if}
{/template}

/**
 * This renders the component's active content.
 */
{template .default}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleCreationButtonClicked: any}
	{@param? _handleCreationMenuMoreButtonClicked: any}
	{@param? _handleFilterDoneButtonClick: any}
	{@param? _handleInfoButtonClicked: any}
	{@param? _handleOpenMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? _handleSelectPageCheckboxChanged: any}
	{@param? _handleSortingButtonClicked: any}
	{@param? _handleViewTypeClicked: any}
	{@param? _showSearchMobile: bool}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		caption: string,
		helpText: string,
		maxPrimaryItems: int,
		maxSecondaryItems: int,
		maxTotalItems: int,
		primaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			separator: bool
		]>,
		secondaryItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			items: list<[
				disabled: bool,
				href: string,
				icon: string,
				label: string,
				separator: bool
			]>,
			label: string,
			separator: bool
		]>,
		viewMoreURL: string
	]}
	{@param? disabled: bool}
	{@param? filterItems: list<[
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? searchValue: string}
	{@param? selectable: bool}
	{@param? showAdvancedSearch: bool}
	{@param? showCreationMenu: bool}
	{@param? showFiltersDoneButton: bool}
	{@param? showInfoButton: bool}
	{@param? showSearch: bool}
	{@param? sortingOrder: string}
	{@param? sortingURL: string}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		href: string,
		icon: string,
		label: string
	]>}

	<nav class="management-bar management-bar-light navbar navbar-expand-md">
		{let $onlySearch: $showSearch and not $creationMenu and not $selectable and not $filterItems and not $sortingOrder and not $viewTypes /}

		<div class="container-fluid container-fluid-max-xl">
			<ul class="navbar-nav">
				{if $selectable}
					<li class="nav-item">
						{call ClayCheckbox.render}
							{param disabled: $disabled /}
							{param events: ['change': $_handleSelectPageCheckboxChanged] /}
							{param label: 'Select Page' /}
							{param ref: 'selectPageCheckbox' /}
							{param showLabel: false /}
						{/call}
					</li>
				{/if}

				{if $filterItems}
					{let $filtersTrigger kind="html"}
						<span class="navbar-breakpoint-down-d-none">
							Filter and Order
							{call ClayIcon.render}
								{param spritemap: $spritemap /}
								{param symbol: 'caret-bottom' /}
							{/call}
						</span>

						<span class="navbar-breakpoint-d-none">
							{call ClayIcon.render}
								{param spritemap: $spritemap /}
								{param symbol: 'filter' /}
							{/call}
						</span>
					{/let}

					<li class="dropdown nav-item">
						{call ClayDropdownBase.render}
							{param button: $showFiltersDoneButton ? [
								'label': 'Done'
							] : null /}
							{param disabled: $disabled /}
							{param events: ['buttonClicked': $_handleFilterDoneButtonClick] /}
							{param items: $filterItems /}
							{param label: $filtersTrigger /}
							{param ref: 'filters' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link' /}
						{/call}
					</li>
				{/if}

				{if $sortingOrder}
					<li class="nav-item">
						{let $sortingClasses kind="text"}
							nav-link nav-link-monospaced
							{if $sortingOrder == 'desc'}
								{sp}order-arrow-down-active
							{else}
								{sp}order-arrow-up-active
							{/if}
						{/let}

						{if $sortingURL}
							{call ClayLink.render}
								{param elementClasses: $sortingClasses /}
								{param events: ['click': $_handleSortingButtonClicked] /}
								{param href: $sortingURL /}
								{param icon: 'order-arrow' /}
								{param ref: 'sortingButton' /}
								{param spritemap: $spritemap /}
							{/call}
						{else}
							{call ClayButton.render}
								{param disabled: $disabled /}
								{param elementClasses: $sortingClasses /}
								{param events: ['click': $_handleSortingButtonClicked] /}
								{param icon: 'order-arrow' /}
								{param ref: 'sortingButton' /}
								{param spritemap: $spritemap /}
								{param style: 'unstyled' /}
							{/call}
						{/if}
					</li>
				{/if}
			</ul>

			{if $showSearch}
				{let $searchClasses kind="text"}
					navbar-form navbar-form-autofit
					{if not $onlySearch}
						{sp}navbar-overlay navbar-overlay-sm-down
						{if $_showSearchMobile}
							{sp}show
						{/if}
					{/if}
				{/let}

				<div class="{$searchClasses}">
					{delcall ClayManagementToolbar.SearchForm variant="$contentRenderer"}
						{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
						{param _handleSearchSearchClick: $_handleSearchSearchClick /}
						{param disabled: $disabled and not $searchValue /}
						{param onlySearch: $onlySearch /}
						{param searchActionURL: $searchActionURL /}
						{param searchFormMethod: $searchFormMethod /}
						{param searchFormName: $searchFormName /}
						{param searchInput kind="html"}
							{call .searchInput}
								{param _handleCloseMobileSearchClick: $_handleCloseMobileSearchClick /}
								{param _handleSearchSearchClick: $_handleSearchSearchClick /}
								{param contentRenderer: $contentRenderer /}
								{param disabled: $disabled and not $searchValue/}
								{param onlySearch: $onlySearch /}
								{param searchInputName: $searchInputName /}
								{param searchValue: $searchValue /}
								{param showAdvancedSearch: $showAdvancedSearch /}
								{param spritemap: $spritemap /}
							{/call}
						{/param}
						{param searchInputName: $searchInputName /}
						{param searchValue: $searchValue /}
						{param spritemap: $spritemap /}
					{/delcall}
				</div>
			{/if}

			<ul class="navbar-nav">
				{if $showSearch and not $onlySearch}
					<li class="nav-item navbar-breakpoint-d-none">
						{call ClayButton.render}
							{param disabled: $disabled /}
							{param elementClasses: 'nav-link nav-link-monospaced' /}
							{param events: ['click': $_handleOpenMobileSearchClick] /}
							{param icon: 'search' /}
							{param spritemap: $spritemap /}
							{param style: 'unstyled' /}
						{/call}
					</li>
				{/if}

				{if $showInfoButton}
					<li class="nav-item">
						{call ClayButton.render}
							{param elementClasses: 'nav-link nav-link-monospaced' /}
							{param events: ['click': $_handleInfoButtonClicked] /}
							{param icon: 'info-circle-open' /}
							{param ref: 'infoButton' /}
							{param spritemap: $spritemap /}
							{param style: 'unstyled' /}
						{/call}
					</li>
				{/if}

				{if $viewTypes}
					<li class="dropdown nav-item">
						{call ClayDropdown.render}
							{param events: ['itemClicked': $_handleViewTypeClicked] /}
							{param icon kind="text"}
								{foreach $viewType in $viewTypes}
									{if $viewType.active}
										{$viewType.icon}
									{/if}
								{/foreach}
							{/param}
							{param items: $viewTypes /}
							{param itemsIconAlignment: 'left' /}
							{param ref: 'viewTypesDropdown' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link nav-link-monospaced' /}
						{/call}
					</li>
				{/if}

				{if $showCreationMenu}
					<li class="nav-item">
						{call .creationMenu}
							{param _handleCreationButtonClicked: $_handleCreationButtonClicked /}
							{param _handleCreationMenuMoreButtonClicked: $_handleCreationMenuMoreButtonClicked /}
							{param creationMenu: $creationMenu /}
							{param spritemap: $spritemap /}
						{/call}
					</li>
				{/if}
			</ul>
		</div>
	</nav>
{/template}

/**
 * This renders the search results bar.
 */
{template .resultsBar}
	{@param searchValue: string}
	{@param? _handleClearResultsClick: any}
	{@param? clearResultsURL: string}
	{@param? totalItems: number}

	<nav class="tbar subnav-tbar subnav-tbar-primary">
		<div class="container-fluid container-fluid-max-xl">
			<ul class="tbar-nav">
				<li class="tbar-item tbar-item-expand">
					<div class="tbar-section">
						<span class="text-truncate-inline">
							<span class="text-truncate">{$totalItems} results for <strong>{$searchValue}</strong></span>
						</span>
					</div>
				</li>
				<li class="tbar-item">
					{if $clearResultsURL}
						{call ClayLink.render}
							{param elementClasses: 'component-link tbar-link' /}
							{param events: ['click': $_handleClearResultsClick] /}
							{param href: $clearResultsURL /}
							{param label: 'Clear' /}
							{param ref: 'clearSearch' /}
						{/call}
					{else}
						{call ClayButton.render}
							{param elementClasses: 'component-link tbar-link' /}
							{param events: ['click': $_handleClearResultsClick] /}
							{param label: 'Clear' /}
							{param ref: 'clearSearch' /}
							{param style: 'unstyled' /}
						{/call}
					{/if}
				</li>
			</ul>
		</div>
	</nav>
{/template}

/**
 * This renders the search main input.
 */
{template .searchInput}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? contentRenderer: string}
	{@param? disabled: bool}
	{@param? onlySearch: bool}
	{@param? searchInputName: string}
	{@param? searchValue: string}
	{@param? showAdvancedSearch: bool}

	<div class="input-group">
		<div class="input-group-item">
			{let $inputAttributes kind="attributes"}
				aria-label="Search"
				{if $disabled}
					disabled
				{/if}

				class="form-control input-group-inset input-group-inset-after"
				name="{$searchInputName}"
				placeholder="Search for..."
				ref="search"
				type="text"

				{if $searchValue}
					value="{$searchValue}"
				{/if}
			{/let}

			<input {$inputAttributes} />

			<span class="input-group-inset-item input-group-inset-item-after">
				{if not $onlySearch}
					{call ClayButton.render}
						{param elementClasses: 'navbar-breakpoint-d-none' /}
						{param events: ['click': $_handleCloseMobileSearchClick] /}
						{param icon: 'times' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
					{/call}
				{/if}

				{call ClayButton.render}
					{param disabled: $disabled /}
					{param events: ['click': $_handleSearchSearchClick] /}
					{param icon: 'search' /}
					{param ref: 'searchButton' /}
					{param spritemap: $spritemap /}
					{param style: 'unstyled' /}
					{param type: 'submit' /}
				{/call}

				{if $showAdvancedSearch}
					{call ClayDropdown.render}
						{param contentRenderer: $contentRenderer /}
						{param icon: 'angle-down' /}
						{param items: [] /}
						{param spritemap: $spritemap /}
					{/call}
				{/if}
			</span>
		</div>
	</div>
{/template}

/**
 * This renders the search form.
 */
{deltemplate ClayManagementToolbar.SearchForm}
	{@param spritemap: string}
	{@param? _handleCloseMobileSearchClick: any}
	{@param? _handleSearchSearchClick: any}
	{@param? disabled: bool}
	{@param? onlySearch: bool}
	{@param? searchActionURL: string}
	{@param? searchFormMethod: string}
	{@param? searchFormName: string}
	{@param? searchInput: html}
	{@param? searchInputName: string}
	{@param? searchValue: string}

	{let $searchFormContent kind="html"}
		{let $searchFormAttributes kind="attributes"}
			{if $searchActionURL}
				action="{$searchActionURL}"
			{/if}

			method="{$searchFormMethod}"
			{if $searchFormName}
				name="{$searchFormName}"
			{/if}

			role="search"
		{/let}

		<form {$searchFormAttributes}>
			{$searchInput}
		</form>
	{/let}

	{if $onlySearch}
		{$searchFormContent}
	{else}
		<div class="container-fluid container-fluid-max-xl">
			{$searchFormContent}
		</div>
	{/if}
{/deltemplate}
