{namespace ClayManagementToolbar}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param spritemap: string}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		button: ?,
		caption: string,
		helpText: string,
		items: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			quickAction: bool,
			separator: bool,
			type: string
		]>
	]}
	{@param? elementClasses: string}
	{@param? filterItems: list<[
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? handleActionClicked_: any}
	{@param? handleCloseMobileSearchClick_: any}
	{@param? handleCreationButtonClicked_: any}
	{@param? handleDeselectAllClicked_: any}
	{@param? handleFilterDoneButtonClick_: any}
	{@param? handleOpenMobileSearchClick_: any}
	{@param? handleSearchSearchClick_: any}
	{@param? handleSelectAllClicked_: any}
	{@param? handleSelectPageCheckboxChanged_: any}
	{@param? handleSortingButtonClicked_: any}
	{@param? handleViewTypeClicked_: any}
	{@param? hideFiltersDoneButton: bool}
	{@param? id: string}
	{@param? searchActionURL: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? selectable: bool}
	{@param? selectedItems: number}
	{@param? showSearch_: bool}
	{@param? sortingOrder: string}
	{@param? totalItems: number}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		icon: string,
		label: string
	]>}

	{let $isActive: $selectedItems and $selectedItems > 0 /}

	{if $isActive}
		{call .active}
			{param actionItems: $actionItems /}
			{param elementClasses: $elementClasses /}
			{param handleActionClicked_: $handleActionClicked_ /}
			{param handleDeselectAllClicked_: $handleDeselectAllClicked_ /}
			{param handleSelectAllClicked_: $handleSelectAllClicked_ /}
			{param handleSelectPageCheckboxChanged_: $handleSelectPageCheckboxChanged_ /}
			{param selectedItems: $selectedItems /}
			{param spritemap: $spritemap /}
			{param totalItems: $totalItems /}
		{/call}
	{else}
		{call .default}
			{param contentRenderer: $contentRenderer ?: '' /}
			{param creationMenu: $creationMenu /}
			{param elementClasses: $elementClasses /}
			{param filterItems: $filterItems /}
			{param handleCloseMobileSearchClick_: $handleCloseMobileSearchClick_ /}
			{param handleCreationButtonClicked_: $handleCreationButtonClicked_ /}
			{param handleFilterDoneButtonClick_: $handleFilterDoneButtonClick_ /}
			{param handleOpenMobileSearchClick_: $handleOpenMobileSearchClick_ /}
			{param handleSearchSearchClick_: $handleSearchSearchClick_ /}
			{param handleSelectPageCheckboxChanged_: $handleSelectPageCheckboxChanged_ /}
			{param handleSortingButtonClicked_: $handleSortingButtonClicked_ /}
			{param handleViewTypeClicked_: $handleViewTypeClicked_ /}
			{param hideFiltersDoneButton: $hideFiltersDoneButton /}
			{param id: $id /}
			{param searchActionURL: $searchActionURL /}
			{param searchFormName: $searchFormName /}
			{param searchInputName: $searchInputName /}
			{param selectable: $selectable /}
			{param showSearch_: $showSearch_ /}
			{param sortingOrder: $sortingOrder /}
			{param spritemap: $spritemap /}
			{param viewTypes: $viewTypes /}
		{/call}
	{/if}
{/template}

/**
 * This renders the component's active content.
 */
{template .active}
	{@param spritemap: string}
	{@param? actionItems: list<[
		disabled: bool,
		href: string,
		icon: string,
		label: string,
		quickAction: bool,
		separator: bool,
		type: string
	]>}
	{@param? elementClasses: string}
	{@param? handleActionClicked_: any}
	{@param? handleDeselectAllClicked_: any}
	{@param? handleSelectAllClicked_: any}
	{@param? handleSelectPageCheckboxChanged_: any}
	{@param? id: string}
	{@param? selectedItems: number}
	{@param? totalItems: number}

	{let $navAttributes kind="attributes"}
		class="management-bar management-bar-primary navbar navbar-expand-md
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<nav {$navAttributes}>
		<div class="container">
			<ul class="navbar-nav">
				<li class="nav-item">
					{call ClayCheckbox.render}
						{param checked: true /}
						{param events: ['change': $handleSelectPageCheckboxChanged_] /}
						{param hideLabel: true /}
						{param indeterminate: $selectedItems < $totalItems /}
						{param label: 'Select Page' /}
						{param ref: 'selectPageCheckbox' /}
					{/call}
				</li>
				<li class="nav-item">
					<span class="navbar-text">
						{$selectedItems} of {$totalItems}{sp}
						<span class="navbar-breakpoint-down-d-none">items selected</span>
					</span>
				</li>
				<li class="nav-item">
					{if $selectedItems < $totalItems}
						{call ClayButton.render}
							{param elementClasses: 'nav-btn' /}
							{param events: ['click': $handleSelectAllClicked_] /}
							{param label: 'Select all' /}
							{param ref: 'selectAllButton' /}
							{param style: 'link' /}
						{/call}
					{else}
						{call ClayButton.render}
							{param elementClasses: 'nav-btn' /}
							{param events: ['click': $handleDeselectAllClicked_] /}
							{param label: 'Deselect all' /}
							{param ref: 'deselectAllButton' /}
							{param style: 'link' /}
						{/call}
					{/if}
				</li>
			</ul>

			{if $actionItems}
				<ul class="navbar-nav">
					{foreach $item in $actionItems}
						{if $item.quickAction and $item.icon and $spritemap}
							<li class="nav-item navbar-breakpoint-down-d-none" data-onclick="{$handleActionClicked_}">
								{call ClayButton.render}
									{param elementClasses: 'quick-action-item' /}
									{param icon: $item.icon /}
									{param ref: 'quickAction' + index($item) /}
									{param spritemap: $spritemap /}
									{param style: 'unstyled' /}
								{/call}
							</li>
						{/if}
					{/foreach}

					<li class="nav-item">
						{call ClayActionsDropdown.render}
							{param events: ['itemClicked': $handleActionClicked_] /}
							{param items: $actionItems /}
							{param spritemap: $spritemap /}
						{/call}
					</li>
				</ul>
			{/if}
		</div>
	</nav>
{/template}

/**
 * This renders the component's active content.
 */
{template .default}
	{@param spritemap: string}
	{@param? contentRenderer: string}
	{@param? creationMenu: [
		button: ?,
		caption: string,
		helpText: string,
		items: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			quickAction: bool,
			separator: bool,
			type: string
		]>
	]}
	{@param? elementClasses: string}
	{@param? filterItems: list<[
		checked: bool,
		disabled: bool,
		inputName: string,
		inputValue: string,
		label: string,
		separator: bool,
		type: string
	]>}
	{@param? handleCloseMobileSearchClick_: any}
	{@param? handleCreationButtonClicked_: any}
	{@param? handleFilterDoneButtonClick_: any}
	{@param? handleOpenMobileSearchClick_: any}
	{@param? handleSearchSearchClick_: any}
	{@param? handleSelectPageCheckboxChanged_: any}
	{@param? handleSortingButtonClicked_: any}
	{@param? handleViewTypeClicked_: any}
	{@param? hideFiltersDoneButton: bool}
	{@param? id: string}
	{@param? searchActionURL: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}
	{@param? selectable: bool}
	{@param? showSearch_: bool}
	{@param? sortingOrder: string}
	{@param? viewTypes: list<[
		active: bool,
		disabled: bool,
		icon: string,
		label: string
	]>}

	{let $navAttributes kind="attributes"}
		class="management-bar management-bar-light navbar navbar-expand-md
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<nav {$navAttributes}>
		<div class="container">
			<ul class="navbar-nav">
				{if $selectable}
					<li class="nav-item">
						{call ClayCheckbox.render}
							{param events: ['change': $handleSelectPageCheckboxChanged_] /}
							{param hideLabel: true /}
							{param label: 'Select Page' /}
							{param ref: 'selectPageCheckbox' /}
						{/call}
					</li>
				{/if}

				{if $filterItems}
					<li class="dropdown nav-item">
						{call ClayDropdown.render}
							{param button: $hideFiltersDoneButton ? null : [
								'label': 'Done'
							] /}
							{param events: ['buttonClicked': $handleFilterDoneButtonClick_] /}
							{param items: $filterItems /}
							{param label: 'Filter and Order' /}
							{param ref: 'filters' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link navbar-breakpoint-down-d-none' /}
						{/call}
					</li>
				{/if}

				<li class="nav-item">
					{let $orderClasses kind="text"}
						nav-link nav-link-monospaced
						{if $sortingOrder == 'desc'}
							{sp}order-arrow-down-active
						{else}
							{sp}order-arrow-up-active
						{/if}
					{/let}

					{call ClayButton.render}
						{param elementClasses: $orderClasses /}
						{param events: ['click': $handleSortingButtonClicked_] /}
						{param icon: 'order-arrow' /}
						{param ref: 'sortingButton' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
					{/call}
				</li>
			</ul>

			{let $searchClasses kind="text"}
				navbar-form navbar-form-autofit navbar-overlay navbar-overlay-sm-down
				{if $showSearch_}
					{sp}show
				{/if}
			{/let}

			<div class="{$searchClasses}">
				<div class="container">
					{delcall ClayManagementToolbar.SearchForm variant="$contentRenderer"}
						{param handleCloseMobileSearchClick_: $handleCloseMobileSearchClick_ /}
						{param handleSearchSearchClick_: $handleSearchSearchClick_ /}
						{param searchActionURL: $searchActionURL /}
						{param searchFormName: $searchFormName /}
						{param searchInputName: $searchInputName /}
						{param spritemap: $spritemap /}
					{/delcall}
				</div>
			</div>

			<ul class="navbar-nav">
				<li class="nav-item navbar-breakpoint-d-none">
					{call ClayButton.render}
						{param elementClasses: 'nav-link nav-link-monospaced' /}
						{param events: ['click': $handleOpenMobileSearchClick_] /}
						{param icon: 'search' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
					{/call}
				</li>

				{if $viewTypes}
					<li class="dropdown nav-item">
						{call ClayDropdown.render}
							{param events: ['itemClicked': $handleViewTypeClicked_] /}
							{param icon kind="text"}
								{foreach $viewType in $viewTypes}
									{if $viewType.active}
										{$viewType.icon}
									{/if}
								{/foreach}
							{/param}
							{param items: $viewTypes /}
							{param itemsIconAlignment: 'left' /}
							{param ref: 'viewTypesDropdown' /}
							{param spritemap: $spritemap /}
							{param triggerClasses: 'nav-link nav-link-monospaced' /}
						{/call}
					</li>
				{/if}

				<li class="nav-item">
					{call .creationMenu}
						{param button: $creationMenu ? $creationMenu.button : null /}
						{param caption: $creationMenu ? $creationMenu.caption : null /}
						{param handleCreationButtonClicked_: $handleCreationButtonClicked_ /}
						{param helpText: $creationMenu ? $creationMenu.helpText : null /}
						{param items: $creationMenu ? $creationMenu.items : null /}
						{param spritemap: $spritemap /}
					{/call}
				</li>
			</ul>
		</div>
	</nav>
{/template}

/**
 * This renders the plus button.
 */
{template .creationMenu}
	{@param spritemap: string}
	{@param? button: ?}
	{@param? caption: string}
	{@param? handleCreationButtonClicked_: any}
	{@param? helpText: string}
	{@param? items: list<?>}

	{if $items and length($items) > 1}
		{call ClayDropdownBase.render}
			{param button: $button /}
			{param caption: $caption /}
			{param helpText: $helpText /}
			{param items: $items /}
			{param label kind="html"}
				{call ClayIcon.render}
					{param spritemap: $spritemap /}
					{param symbol: 'plus' /}
				{/call}
			{/param}

			{param ref: 'creationMenuDropdown' /}
			{param spritemap: $spritemap /}
			{param style: 'primary' /}
			{param triggerClasses: 'nav-btn nav-btn-monospaced navbar-breakpoint-down-d-none' /}
		{/call}
	{elseif $items}
		{call ClayLink.render}
			{param buttonStyle: 'primary' /}
			{param elementClasses: 'nav-btn nav-btn-monospaced navbar-breakpoint-down-d-none' /}
			{param href: $items[0].href /}
			{param icon: 'plus' /}
			{param spritemap: $spritemap /}
		{/call}
	{else}
		{call ClayButton.render}
			{param elementClasses: 'nav-btn nav-btn-monospaced' /}
			{param events: ['click': $handleCreationButtonClicked_ ] /}
			{param icon: 'plus' /}
			{param ref: 'creationMenu' /}
			{param spritemap: $spritemap /}
		{/call}
	{/if}
{/template}

/**
 * This renders the search form.
 */
{deltemplate ClayManagementToolbar.SearchForm}
	{@param spritemap: string}
	{@param? handleCloseMobileSearchClick_: any}
	{@param? handleSearchSearchClick_: any}
	{@param? searchActionURL: string}
	{@param? searchFormName: string}
	{@param? searchInputName: string}

	{let $searchFormAttributes kind="attributes"}
		{if $searchActionURL}
			action="{$searchActionURL}"
		{/if}

		{if $searchFormName}
			name="{$searchFormName}"
		{/if}

		role="search"
	{/let}

	<form {$searchFormAttributes}>
		<div class="input-group">
			<div class="input-group-item">
				{let $inputAttributes kind="attributes"}
					aria-label="Search"
					class="form-control input-group-inset input-group-inset-after"
					name="{$searchInputName}"
					placeholder="Search for..."
					ref="search"
					type="text"
				{/let}

				<input {$inputAttributes} />

				<span class="input-group-inset-item input-group-inset-item-after">
					{call ClayButton.render}
						{param elementClasses: 'navbar-breakpoint-d-none' /}
						{param events: ['click': $handleCloseMobileSearchClick_] /}
						{param icon: 'times' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
					{/call}

					{call ClayButton.render}
						{param elementClasses: 'navbar-breakpoint-d-block' /}
						{param events: ['click': $handleSearchSearchClick_] /}
						{param icon: 'search' /}
						{param ref: 'searchButton' /}
						{param spritemap: $spritemap /}
						{param style: 'unstyled' /}
						{param type: 'submit' /}
					{/call}
				</span>
			</div>
		</div>
	</form>
{/deltemplate}