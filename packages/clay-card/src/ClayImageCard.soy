{namespace ClayImageCard}

/**
 * This renders the component's whole content.
 */
{template .render}
    {@param title: string}
    {@param? _handleItemToggled: any}
    {@param? actionItems: list<[
        href: string,
        label: string,
        separator: bool
    ]>}
    {@param? disabled: bool}
    {@param? elementClasses: string}
    {@param? fileType: string}
    {@param? fileTypeStyle: string}
    {@param? groupName: string}
    {@param? href: string}
    {@param? icon: string}
    {@param? id: string}
    {@param? imageAlt: string}
    {@param? imageSrc: string}
    {@param? inputName: string}
    {@param? inputValue: string}
    {@param? labels: list<?>}
    {@param? labelStylesMap: ?}
    {@param? selectable: bool}
    {@param? selected: bool}
    {@param? spritemap: string}
    {@param? subtitle: string}

    {let $classes kind="text"}
        image-card
        {if $elementClasses}
            {sp}{$elementClasses}
        {/if}
    {/let}

    {call ClayCardBase.render}
        {param actionItems: $actionItems /}
        {param contentRenderer: 'image' /}
        {param disabled: $disabled /}
        {param elementClasses: $classes /}
        {param events: ['itemToggled': $_handleItemToggled ] /}
        {param fileType: $fileType /}
        {param fileTypeStyle: $fileTypeStyle /}
        {param groupName: $groupName /}
        {param href: $href /}
        {param icon: $icon /}
        {param id: $id /}
        {param imageAlt: $imageAlt /}
        {param imageSrc: $imageSrc /}
        {param inputName: $inputName /}
        {param inputValue: $inputValue /}
        {param labels: $labels /}
        {param labelStylesMap: $labelStylesMap /}
        {param ref: 'card' /}
        {param selectable: $selectable /}
        {param selected: $selected /}
        {param spritemap: $spritemap /}
        {param subtitle: $subtitle /}
        {param title: $title /}
    {/call}
{/template}

/**
 * Render the visual area of the card.
 */
{deltemplate ClayCardBase.VisualArea variant="'image'"}
    {@param? fileType: string}
    {@param? fileTypeStyle: string}
    {@param? icon: string}
    {@param? imageAlt: string}
    {@param? imageSrc: string}
    {@param? spritemap: string}

    	{let $aspectRatioClasses kind="text"}
    		aspect-ratio-item-center-middle aspect-ratio-item-fluid
            {if not $imageSrc and $icon and $spritemap}
                {sp}card-type-asset-icon
            {/if}
    	{/let}

    	{if $imageSrc}
    		{let $imageAttributes kind="attributes"}
    			alt="
    				{if $imageAlt}
    					{$imageAlt}
    				{/if}
    			"

    			class="{$aspectRatioClasses}"
    			src="{$imageSrc}"
    		{/let}

    		<img {$imageAttributes} />
    	{elseif $icon and $spritemap}
    		<div class="{$aspectRatioClasses}">
    			{call ClayIcon.render}
    				{param spritemap: $spritemap /}
    				{param symbol: $icon /}
    			{/call}
    		</div>
    	{/if}

    	{if $fileType}
    		{call ClaySticker.render}
    			{param label: $fileType /}
    			{param position: 'bottom-left' /}
    			{param style: $fileTypeStyle ?: 'primary' /}
    		{/call}
    	{/if}
{/deltemplate}
