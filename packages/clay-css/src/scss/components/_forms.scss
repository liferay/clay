//
// Forms
//

label {
	// Allow labels to use `margin` for spacing.
	display: inline-block;
	margin-bottom: $label-margin-bottom;
}

input,
select,
optgroup,
textarea {
	margin: 0; // Remove the margin in Firefox and Safari
	font-family: inherit;
	@include font-size(inherit);
	line-height: inherit;
}

input {
	overflow: visible; // Show the overflow in Edge
}

select {
	text-transform: none; // Remove the inheritance of text transform in Firefox
}

// Remove the inheritance of word-wrap in Safari.
//
// Details at https://github.com/twbs/bootstrap/issues/24990
select {
	word-wrap: normal;
}


// 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
//    controls in Android 4.
// 2. Correct the inability to style clickable types in iOS and Safari.
[type="button"], // 1
[type="reset"],
[type="submit"] {
	-webkit-appearance: button; // 2
}

// Remove inner border and padding from Firefox, but don't restore the outline like Normalize.
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
	padding: 0;
	border-style: none;
}

input[type="radio"],
input[type="checkbox"] {
	box-sizing: border-box; // 1. Add the correct box sizing in IE 10-
	padding: 0; // 2. Remove the padding in IE 10-
}


input[type="date"],
input[type="time"],
input[type="datetime-local"],
input[type="month"] {
	// Remove the default appearance of temporal inputs to avoid a Mobile Safari
	// bug where setting a custom line-height prevents text from being vertically
	// centered within the input.
	// See https://bugs.webkit.org/show_bug.cgi?id=139848
	// and https://github.com/twbs/bootstrap/issues/11266
	-webkit-appearance: listbox;
}

textarea {
	overflow: auto; // Remove the default vertical scrollbar in IE.
	// Textareas should really only resize vertically so they don't break their (horizontal) containers.
	resize: vertical;
}

fieldset {
	// Browsers set a default `min-width: min-content;` on fieldsets,
	// unlike e.g. `<div>`s, which have `min-width: 0;` by default.
	// So we reset that to ensure fieldsets behave more like a standard block element.
	// See https://github.com/twbs/bootstrap/issues/12359
	// and https://html.spec.whatwg.org/multipage/#the-fieldset-and-legend-elements
	min-width: 0;
	// Reset the default outline behavior of fieldsets so they don't affect page layout.
	padding: 0;
	margin: 0;
	border: 0;
}

// 1. Correct the text wrapping in Edge and IE.
// 2. Correct the color inheritance from `fieldset` elements in IE.
legend {
	display: block;
	width: 100%;
	max-width: 100%; // 1
	padding: 0;
	margin-bottom: .5rem;
	@include font-size(1.5rem);
	line-height: inherit;
	color: inherit; // 2
	white-space: normal; // 1
}

// Correct the cursor style of increment and decrement buttons in Chrome.
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
	height: auto;
}

[type="search"] {
	// This overrides the extra rounded corners on search inputs in iOS so that our
	// `.form-control` class can properly style them. Note that this cannot simply
	// be added to `.form-control` as it's not specific enough. For details, see
	// https://github.com/twbs/bootstrap/issues/11586.
	outline-offset: -2px; // 2. Correct the outline style in Safari.
	-webkit-appearance: none;
}

//
// Remove the inner padding in Chrome and Safari on macOS.
//

[type="search"]::-webkit-search-decoration {
	-webkit-appearance: none;
}

//
// 1. Correct the inability to style clickable types in iOS and Safari.
// 2. Change font properties to `inherit` in Safari.
//

::-webkit-file-upload-button {
	font: inherit; // 2
	-webkit-appearance: button; // 1
}

//
// Correct element displays
//

output {
	display: inline-block;
}

[type='checkbox'] {
	cursor: $form-check-input-cursor;
	height: 14px;
	width: 14px;

	&:disabled {
		cursor: $form-check-input-disabled-cursor;
	}
}

[type='radio'] {
	cursor: $form-check-input-cursor;
	height: 15px;
	width: 14px;

	&:disabled {
		cursor: $form-check-input-disabled-cursor;
	}
}

fieldset {
	word-wrap: break-word;

	// FF Fieldset workaround

	@-moz-document url-prefix() {
		display: table-cell;
	}
}

label {
	color: $input-label-color;
	font-size: $input-label-font-size;
	font-weight: $input-label-font-weight;
	margin-bottom: $input-label-margin-bottom;
	max-width: 100%;
	word-wrap: break-word;

	@include clay-scale-component {
		font-size: $input-label-font-size-mobile;
	}

	&.focus {
		color: $input-label-focus-color;
	}

	&[for] {
		cursor: $input-label-for-cursor;
	}

	+ .form-text {
		margin-bottom: $input-label-margin-bottom;
		margin-top: 0;
	}

	.reference-mark {
		color: $input-label-reference-mark-color;
		font-size: $input-label-reference-mark-font-size;
		margin-left: $input-label-reference-mark-spacer;
		margin-right: $input-label-reference-mark-spacer;
		vertical-align: $input-label-reference-mark-vertical-align;
	}
}

// Label without for attribute

.form-control-label {
	display: inline;
	margin-bottom: 0;
}

.form-control-label-text {
	cursor: $input-label-for-cursor;
	display: inline-block;
	margin-bottom: $input-label-margin-bottom;
	max-width: 100%;
	word-wrap: break-word;
}

// Inputs

.form-control {
	background-clip: border-box;
	border-color: $input-border-color;
	border-style: $input-border-style;
	border-bottom-width: $input-border-bottom-width;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-top-width: $input-border-top-width;

	@if not($input-font-size == $font-size-base) {
		font-size: $input-font-size;
	}

	height: $input-height;
	min-width: 0;

	@if not($input-padding-y == $btn-padding-y) {
		padding-bottom: $input-padding-y;
		padding-top: $input-padding-y;
	}

	@if not($input-padding-x == $btn-padding-x) {
		padding-left: $input-padding-x;
		padding-right: $input-padding-x;
	}

	@include clay-scale-component {
		font-size: $input-font-size-mobile;
		height: $input-height-mobile;
	}

	&:focus {
		&::placeholder {
			color: $input-placeholder-focus-color;
		}
	}

	&.focus {
		@include clay-form-control-focus();
	}

	&.disabled {
		background-color: $input-disabled-bg;
		border-color: $input-disabled-border-color;
		color: $input-disabled-color;
		cursor: $input-disabled-cursor;
		opacity: $input-disabled-opacity;
	}

	&[type='range'] {
		background-color: transparent;
		border-color: transparent;
		padding: 0;

		&:focus {
			box-shadow: none;
		}

		&::-webkit-slider-thumb {
			// Chrome hack for https://github.com/liferay/clay/issues/1179

			outline: $primary-l2 auto 5px;
		}
	}

	&:not([type='range']) {
		@media screen and (-webkit-min-device-pixel-ratio: 0) {
			-webkit-appearance: none;
		}
	}

	&::-ms-clear,
	&::-ms-reveal {
		display: none;
		height: 0;
		width: 0;
	}

	.label {
		@include clay-label-size($form-control-label-size);
	}
}

.form-control-plaintext {
	background-clip: border-box;
	border-bottom-width: $input-border-bottom-width;
	border-left-width: $input-border-left-width;
	border-right-width: $input-border-right-width;
	border-top-width: $input-border-top-width;

	@if not($input-font-size == $font-size-base) {
		font-size: $input-font-size;
	}

	height: $input-height;
	min-width: 0;

	@if not($input-padding-y == $btn-padding-y) {
		padding-bottom: $input-padding-y;
		padding-top: $input-padding-y;
	}

	text-overflow: ellipsis;

	@include clay-scale-component {
		font-size: $input-font-size-mobile;
		height: $input-height-mobile;
	}
}

.form-control-hidden {
	left: 0;
	opacity: 0;
	position: absolute;
	z-index: -1;
}

div {
	&.form-control {
		height: auto;
		min-height: $input-height;
	}

	&.form-control-lg {
		min-height: $input-height-lg;
	}

	&.form-control-sm {
		min-height: $input-height-sm;
	}
}

.form-control-tag-group {
	@include clay-container($form-control-tag-group);

	.autofit-row {
		@include clay-container($form-control-tag-group-autofit-row);
	}

	.autofit-col {
		@include clay-container($form-control-tag-group-autofit-col);
	}

	.input-group-item {
		@include clay-container($form-control-tag-group-input-group-item);
	}

	.inline-item {
		@include clay-container($form-control-tag-group-inline-item);
	}

	.btn {
		@include clay-button-variant($form-control-tag-group-btn);
	}

	.btn-monospaced,
	.component-action {
		@include clay-button-variant($form-control-tag-group-btn-monospaced);
	}
}

.form-control-inset {
	background-color: transparent;
	border-width: 0;
	color: $input-color;
	flex-grow: 1;
	margin-bottom: $form-control-inset-margin-y;
	margin-top: $form-control-inset-margin-y;
	min-height: $form-control-inset-min-height;
	padding: 0;

	&:focus {
		outline: 0;
	}

	&:disabled {
		background-color: $input-disabled-bg;
		border-color: $input-disabled-border-color;
		color: $input-disabled-color;
		cursor: $input-disabled-cursor;
		opacity: $input-disabled-opacity;
	}
}

// Select

select.form-control {
	@include clay-select-variant($input-select);
}

.form-control-select {
	@include clay-css($form-control-select);
}

select.form-control[size] {
	@include clay-select-variant($input-select-size);
}

select.form-control[multiple] {
	@include clay-select-variant($input-select-multiple);
}

// Textarea

textarea.form-control,
textarea.form-control-plaintext,
.form-control.form-control-textarea {
	height: $input-textarea-height;
}

// File

.form-control-file {
	cursor: $input-file-cursor;

	&::-webkit-file-upload-button {
		cursor: $input-file-cursor;
	}
}

// Checkbox and Radio

.form-check-label {
	cursor: $form-check-label-cursor;
	display: inline;
	position: relative;
}

.form-check-input {
	position: static;

	&:disabled {
		cursor: $form-check-input-disabled-cursor;

		+ .form-check-label-text {
			color: $input-label-disabled-color;
			cursor: $form-check-label-text-disabled-cursor;
		}
	}
}

.form-check-label-text {
	margin-left: $form-check-label-text-margin-left;
	padding-left: $form-check-label-text-padding-left;
}

// Disabled State

fieldset[disabled] label,
label.disabled {
	color: $input-label-disabled-color;
	cursor: $input-label-disabled-cursor;
	opacity: $input-disabled-opacity;
}

fieldset[disabled] label {
	.form-control {
		font-weight: normal;
		opacity: 1;
	}
}

.form-control {
	fieldset[disabled] &,
	&[disabled] {
		border-color: $input-disabled-border-color;
		color: $input-disabled-color;
		cursor: $input-disabled-cursor;
		opacity: $input-disabled-opacity;

		&::placeholder {
			color: $input-placeholder-disabled-color;
		}
	}
}

.form-control[disabled] > option {
	// Webkit only

	@media (-webkit-min-device-pixel-ratio: 0) {
		color: $input-disabled-color;
	}
}

.form-check.disabled .form-check-label {
	@if not($input-label-disabled-color == $text-muted) {
		color: $input-label-disabled-color;
	}
}

.form-control-file:disabled {
	cursor: $input-disabled-cursor;

	&::-webkit-file-upload-button {
		cursor: $input-disabled-cursor;
	}
}

// Readonly State

.form-control[readonly] {
	@include clay-form-control-variant($input-readonly);
}

.form-control-plaintext[readonly] {
	@include clay-form-control-variant($input-plaintext-readonly);
}

// Input Sizes

// Bootstrap 4 @extend .form-control-lg; work around

%clay-form-control-lg {
	@include border-radius($input-border-radius-lg);

	font-size: $input-font-size-lg;
	height: $input-height-lg;
	padding-bottom: $input-padding-y-lg;
	padding-left: $input-padding-x-lg;
	padding-right: $input-padding-x-lg;
	padding-top: $input-padding-y-lg;

	@include clay-scale-component {
		height: $input-height-lg-mobile;
	}
}

.form-control-lg {
	@extend %clay-form-control-lg;
}

%clay-select-form-control-lg {
	height: $input-height-lg;

	@include clay-scale-component {
		height: $input-height-lg-mobile;
	}
}

%clay-textarea-form-control-lg {
	height: $input-textarea-height-lg;
}

textarea.form-control-lg,
.form-control-lg.form-control-textarea {
	height: $input-textarea-height-lg;
}

// Bootstrap 4 @extend .form-control-sm; work around

%clay-form-control-sm {
	@include border-radius($input-border-radius-sm);

	font-size: $input-font-size-sm;
	height: $input-height-sm;
	padding-bottom: $input-padding-y-sm;
	padding-left: $input-padding-x-sm;
	padding-right: $input-padding-x-sm;
	padding-top: $input-padding-y-sm;

	@include clay-scale-component {
		height: $input-height-sm-mobile;
	}
}

.form-control-sm {
	@extend %clay-form-control-sm;
}

%clay-select-form-control-sm {
	height: $input-height-sm;

	@include clay-scale-component {
		height: $input-height-sm-mobile;
	}
}

%clay-textarea-form-control-sm {
	height: $input-textarea-height-sm;
}

textarea.form-control-sm,
.form-control-sm.form-control-textarea {
	height: $input-textarea-height-sm;
}

// Form Group Autofit

.form-group-autofit {
	align-items: flex-start;
	display: flex;
	flex-direction: column;
	margin-bottom: $form-group-autofit-margin-bottom;

	@include media-breakpoint-up(sm) {
		flex-direction: row;
		width: 100%;
	}

	label {
		align-self: flex-start;
	}

	.form-group-item {
		display: flex;
		flex-basis: auto;
		flex-direction: column;
		flex-grow: 0;
		flex-shrink: 1;
		min-width: 25px;
		position: relative;
		width: 100%;

		&:not(:last-child) {
			margin-bottom: $form-group-margin-bottom;

			@include media-breakpoint-down(xs) {
				margin-bottom: $form-group-margin-bottom-mobile;
			}
		}
	}

	> .form-group-item:not(:last-child) {
		@include media-breakpoint-up(sm) {
			margin-bottom: 0;
			margin-right: $grid-gutter-width / 2;
		}
	}

	.form-group-item-shrink {
		flex-shrink: 0;
		max-width: 100%;
		width: auto;
	}
}

// Form Group Item Label

.form-group-autofit .form-group-item-label:not(:last-child) {
	@include media-breakpoint-down(xs) {
		margin-bottom: 0;
	}
}

.form-group-item-label {
	@include media-breakpoint-up(sm) {
		justify-content: center;
		min-height: $input-height;

		> label {
			margin-bottom: 0;
			max-width: $form-group-item-label-max-width;
		}
	}
}

.form-group-item-label-spacer {
	@include media-breakpoint-up(sm) {
		margin-top: $form-group-item-label-spacer;
	}
}

// Form Group

.form-group {
	position: relative;

	@include clay-scale-component {
		margin-bottom: $form-group-margin-bottom-mobile;
	}
}

.form-group-sm {
	margin-bottom: $form-group-sm-margin-bottom;

	@include clay-scale-component {
		margin-bottom: $form-group-sm-margin-bottom-mobile;
	}

	label {
		margin-bottom: $form-group-sm-input-label-margin-bottom;
	}

	.btn {
		@extend %clay-btn-sm !optional;
	}

	.form-control,
	.form-control-plaintext {
		@extend %clay-form-control-sm;
	}

	select.form-control {
		@extend %clay-select-form-control-sm;
	}

	select[multiple],
	.form-control[size] {
		height: auto;
	}

	textarea.form-control,
	.form-control.form-control-textarea {
		@extend %clay-textarea-form-control-sm;
	}

	.form-feedback-item ~ .form-feedback-item,
	.form-feedback-item ~ .form-text,
	.form-text ~ .form-feedback-item,
	.form-text ~ .form-text {
		margin-top: 0;
	}

	.form-group-item-label {
		@include media-breakpoint-up(sm) {
			min-height: $input-height-sm;

			> label {
				margin-bottom: 0;
			}
		}
	}

	.form-group-item-label-spacer {
		@include media-breakpoint-up(sm) {
			margin-top: $form-group-sm-item-label-spacer;
		}
	}
}
