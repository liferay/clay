////
/// @group stickers
////

/// A mixin that helps create custom Sticker sizes.
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// font-size: {Number | String | Null},
/// inline-item-font-size: {Number | String | Null},
/// outside-offset: {Number | String}, // Default: -(map-get($map, size) / 2)
/// size: {Number | String | Null},
/// @todo
/// - Add @example
/// - Add @link to documentation

@mixin clay-sticker-size($map) {
	$font-size: map-get($map, font-size);
	$inline-item-font-size: map-get($map, inline-item-font-size);
	$outside-offset: setter(
		map-get($map, outside-offset),
		-(map-get($map, size) / 2)
	);
	$size: map-get($map, size);

	font-size: $font-size;

	@include clay-monospace($size);

	> .inline-item {
		font-size: $inline-item-font-size;
	}

	&.sticker-outside {
		left: $outside-offset;
		top: $outside-offset;

		&.sticker-bottom-left {
			bottom: $outside-offset;
			top: auto;
		}

		&.sticker-bottom-right {
			bottom: $outside-offset;
			left: auto;
			right: $outside-offset;
			top: auto;
		}

		&.sticker-top-right {
			left: auto;
			right: $outside-offset;
		}
	}
}

/// A mixin to create sticker variants. You can base your variant off `.sticker` or create your own base class (e.g., `<span class="sticker my-custom-sticker-variant"></span>` or `<span class="my-custom-sticker"></span>`).
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// enabled: {Bool}, // Set to false to prevent mixin styles from being output. Default: true
/// See Mixin `clay-css` for available keys to pass into the base selector
/// sticker-overlay: {Map | Null}, // See Mixin `clay-css` for available keys
/// -=-=-=-=-=- Deprecated -=-=-=-=-=-
/// bg: {Color | String | Null}, // deprecated after 3.9.0
/// @todo
/// - Add @example
/// - Add @link to documentation

@mixin clay-sticker-variant($map) {
	$enabled: setter(map-get($map, enabled), true);

	$base: map-merge(
		(
			background-color: map-get($map, bg),
		),
		$map
	);

	$inline-item: setter(map-get($map, inline-item), ());

	$sticker-overlay: setter(map-get($map, sticker-overlay), ());
	$sticker-overlay: map-merge(
		(
			border-radius:
				setter(
					map-get($sticker-overlay, border-radius),
					map-get($base, border-radius)
				),
		),
		$sticker-overlay
	);

	$sticker-outside: setter(map-get($map, sticker-outside), ());

	$sticker-outside-bottom-left: setter(
		map-get($map, sticker-outside-bottom-left),
		()
	);

	$sticker-outside-bottom-right: setter(
		map-get($map, sticker-outside-bottom-right),
		()
	);

	$sticker-outside-top-right: setter(
		map-get($map, sticker-outside-top-right),
		()
	);

	@if ($enabled) {
		@include clay-css($base);

		> .inline-item {
			@include clay-css($inline-item);
		}

		.sticker-overlay {
			@include clay-css($sticker-overlay);
		}

		&.sticker-outside {
			@include clay-css($sticker-outside);

			&.sticker-bottom-left {
				@include clay-css($sticker-outside-bottom-left);
			}

			&.sticker-bottom-right {
				@include clay-css($sticker-outside-bottom-right);
			}

			&.sticker-top-right {
				@include clay-css($sticker-outside-top-right);
			}
		}
	}
}
