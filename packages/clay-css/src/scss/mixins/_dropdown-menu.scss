////
/// @group Dropdowns
////

/// A mixin to create Dropdown Menu variants. You can base your variant off Bootstrap's `.dropdown-menu` class or create your own base class (e.g., `<div class="dropdown-menu my-custom-dropdown-menu"></div>` or `<div class="my-custom-dropdown-menu"></div>`).
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// enabled: {Bool}, // Set to false to prevent mixin styles from being output. Default: true
/// breakpoint-down: {String, Null}, // The Bootstrap 4 Breakpoint {xs | sm | md | lg | xl}
/// See Mixin `clay-css` for available keys to pass into the base selector
/// mobile: {Map | Null}, // See Mixin `clay-css` for available keys
/// -=-=-=-=-=- Deprecated -=-=-=-=-=-
/// bg: {Color | String | Null}, // deprecated after 3.9.0
/// bg-clip: {String | Null}, // deprecated after 3.9.0
/// font-size-mobile: {Number | String | Null}, // deprecated after 3.9.0
/// max-height-mobile: {Number | String | Null}, // deprecated after 3.9.0
/// max-width-mobile: {Number | String | Null}, // deprecated after 3.9.0
/// @todo
/// - Add @example
/// - Add @link to documentation

@mixin clay-dropdown-menu-variant($map) {
	$enabled: setter(map-get($map, enabled), true);

	$breakpoint-down: map-get($map, breakpoint-down);

	$base: map-merge(
		(
			background-color: map-get($map, bg),
			background-clip: map-get($map, bg-clip),
		),
		$map
	);

	$mobile: setter(map-get($map, mobile), ());
	$mobile: map-merge(
		(
			font-size: map-get($map, font-size-mobile),
			max-height: map-get($map, max-height-mobile),
			max-width: map-get($map, max-width-mobile),
		),
		$mobile
	);

	@if ($enabled) {
		@include clay-css($base);

		// Firefox clips overflowing content and doesn't respect `padding-bottom` on `.dropdown-menu`

		padding-bottom: 0;

		&::after {
			padding-top: map-get($base, padding-bottom);
		}

		@if ($breakpoint-down) {
			@include media-breakpoint-down($breakpoint-down) {
				@include clay-css($mobile);
			}
		}
	}
}

/// A mixin to create Dropdown Item variants. You can base your variant off Bootstrap's `.dropdown-item` class or create your own base class (e.g., `<a class="dropdown-item my-custom-dropdown-item" href="/"></a>` or `<a class="my-custom-dropdown-item" href="/"></a>`).
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// enabled: {Bool}, // Set to false to prevent mixin styles from being output. Default: true
/// See Mixin `clay-css` for available keys to pass into the base selector
/// hover: {Map | Null}, // See Mixin `clay-css` for available keys
/// hover-c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// focus: {Map | Null}, // See Mixin `clay-css` for available keys
/// focus-c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// active: {Map | Null}, // See Mixin `clay-css` for available keys
/// active-c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// active-class: {Map | Null}, // See Mixin `clay-css` for available keys
/// active-class-c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// disabled: {Map | Null}, // See Mixin `clay-css` for available keys
/// disabled-c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// disabled-active: {Map | Null}, // See Mixin `clay-css` for available keys
/// autofit-row: {Map | Null}, // See Mixin `clay-css` for available keys
/// c-kbd-inline: {Map | Null}, // See Mixin `clay-css` for available keys
/// c-inner: {Map | Null}, // Pass parameters to `clay-css` mixin
/// -=-=-=-=-=- Deprecated -=-=-=-=-=-
/// bg: {Color | String | Null}, // deprecated after 3.9.0
/// hover-bg: {Color | String | Null}, // deprecated after 3.9.0
/// hover-color: {Color | String | Null}, // deprecated after 3.9.0
/// hover-opacity: {Number | String | Null}, // deprecated after 3.9.0
/// hover-text-decoration: {String | Null}, // deprecated after 3.9.0
/// focus-bg: {Color | String | Null}, // deprecated after 3.9.0
/// focus-border-radius: {Number | String | List | Null}, // deprecated after 3.9.0
/// focus-box-shadow: {String | List | Null}, // deprecated after 3.9.0
/// focus-color: {Color | String | Null}, // deprecated after 3.9.0
/// focus-opacity: {Number | String | Null}, // deprecated after 3.9.0
/// focus-outline: {Number | String | Null}, // deprecated after 3.9.0
/// focus-text-decoration: {String | Null}, // deprecated after 3.9.0
/// active-bg: {Color | String | Null}, // deprecated after 3.9.0
/// active-border-color: {String | List | Null}, // deprecated after 3.9.0
/// active-color: {Color | String | Null}, // deprecated after 3.9.0
/// active-font-weight: {Number | String | Null}, // deprecated after 3.9.0
/// active-text-decoration: {String | Null}, // deprecated after 3.9.0
/// active-class-bg: {Color | String | Null}, // deprecated after 3.9.0
/// active-class-border-color: {Color | String | List | Null}, // deprecated after 3.9.0
/// active-class-color: {Color | String | Null}, // deprecated after 3.9.0
/// active-class-font-weight: {Number | String | Null}, // deprecated after 3.9.0
/// active-class-text-decoration: {String | Null}, // deprecated after 3.9.0
/// disabled-bg: {Color | String | Null}, // deprecated after 3.9.0
/// disabled-border-color: {Color | String | List | Null}, // deprecated after 3.9.0
/// disabled-box-shadow: {String | List | Null}, // deprecated after 3.9.0
/// disabled-color: {Color | String | Null}, // deprecated after 3.9.0
/// disabled-cursor: {String | Null}, // deprecated after 3.9.0
/// disabled-opacity: {Number | String | Null}, // deprecated after 3.9.0
/// disabled-outline: {Number | String | Null}, // deprecated after 3.9.0
/// disabled-pointer-events: {String | Null}, // deprecated after 3.9.0
/// disabled-text-decoration: {String | Null}, // deprecated after 3.9.0
/// disabled-active-pointer-events: {String | Null}, // deprecated after 3.9.0
/// @todo
/// - Add @example
/// - Add @link to documentation

@mixin clay-dropdown-item-variant($map) {
	$enabled: setter(map-get($map, enabled), true);

	$base: map-merge(
		(
			background-color: map-get($map, bg),
		),
		$map
	);

	$hover: setter(map-get($map, hover), ());
	$hover: map-merge(
		(
			background-color: map-get($map, hover-bg),
			color: map-get($map, hover-color),
			opacity: map-get($map, hover-opacity),
			text-decoration: map-get($map, hover-text-decoration),
		),
		$hover
	);

	$hover-c-kbd-inline: setter(map-get($map, hover-c-kbd-inline), ());

	$focus: setter(map-get($map, focus), ());
	$focus: map-merge(
		(
			background-color: map-get($map, focus-bg),
			border-radius: map-get($map, focus-border-radius),
			box-shadow: map-get($map, focus-box-shadow),
			color: map-get($map, focus-color),
			opacity: map-get($map, focus-opacity),
			outline: map-get($map, focus-outline),
			text-decoration: map-get($map, focus-text-decoration),
		),
		$focus
	);

	$focus-c-kbd-inline: setter(map-get($map, focus-c-kbd-inline), ());

	$active: setter(map-get($map, active), ());
	$active: map-merge(
		(
			background-color: map-get($map, active-bg),
			border-color: map-get($map, active-border-color),
			color: map-get($map, active-color),
			font-weight: map-get($map, active-font-weight),
			text-decoration: map-get($map, active-text-decoration),
		),
		$active
	);

	$active-c-kbd-inline: setter(map-get($map, active-c-kbd-inline), ());

	$active-class: setter(map-get($map, active-class), ());
	$active-class: map-merge(
		(
			background-color: map-get($map, active-class-bg),
			border-color: map-get($map, active-class-border-color),
			color: map-get($map, active-class-color),
			font-weight: map-get($map, active-class-font-weight),
			text-decoration: map-get($map, active-class-text-decoration),
		),
		$active-class
	);

	$active-class-c-kbd-inline: setter(map-get($map, active-class-c-kbd-inline), ());

	$disabled: setter(map-get($map, disabled), ());
	$disabled: map-merge(
		(
			background-color: map-get($map, disabled-bg),
			border-color: map-get($map, disabled-border-color),
			box-shadow: map-get($map, disabled-box-shadow),
			color: map-get($map, disabled-color),
			cursor: map-get($map, disabled-cursor),
			opacity: map-get($map, disabled-opacity),
			outline: map-get($map, disabled-outline),
			pointer-events: map-get($map, disabled-pointer-events),
			text-decoration: map-get($map, disabled-text-decoration),
		),
		$disabled
	);

	$disabled-c-kbd-inline: setter(map-get($map, disabled-c-kbd-inline), ());

	$disabled-active: setter(map-get($map, disabled-active), ());
	$disabled-active: map-merge(
		(
			pointer-events: map-get($map, disabled-active-pointer-events),
		),
		$disabled-active
	);

	$autofit-row: setter(map-get($map, autofit-row), ());

	$c-kbd-inline: setter(map-get($map, c-kbd-inline), ());

	$c-inner: setter(map-get($map, c-inner), ());
	$c-inner: map-merge(
		(
			flex-grow: 1,
			margin-bottom: math-sign(map-get($map, padding-bottom)),
			margin-left: math-sign(map-get($map, padding-left)),
			margin-right: math-sign(map-get($map, padding-right)),
			margin-top: math-sign(map-get($map, padding-top)),
			width: auto,
		),
		$c-inner
	);

	@if ($enabled) {
		@include clay-css($base);

		&:hover {
			@include clay-css($hover);

			.c-kbd-inline {
				@include clay-css($hover-c-kbd-inline);
			}
		}

		&:focus {
			@include clay-css($focus);

			.c-kbd-inline {
				@include clay-css($focus-c-kbd-inline);
			}
		}

		&:active {
			@include clay-css($active);

			label {
				color: map-get($active, color);
			}

			.form-check-label {
				color: map-get($active, color);
				font-weight: map-get($active, font-weight);
			}

			.custom-control-label {
				font-weight: map-get($active, font-weight);
			}

			.c-kbd-inline {
				@include clay-css($active-c-kbd-inline);
			}
		}

		&.active {
			@include clay-css($active-class);

			label {
				color: map-get($active-class, color);
			}

			.form-check-label {
				color: map-get($active-class, color);
				font-weight: map-get($active-class, font-weight);
			}

			.custom-control-label {
				font-weight: map-get($active-class, font-weight);
			}

			.c-kbd-inline {
				@include clay-css($active-class-c-kbd-inline);
			}
		}

		// Overwrite Bootstrap's Ensure active button styles are not applied to disabled buttons
		// https://github.com/twbs/bootstrap/commit/de3973b5e74058e37fd15fecc4cb7b9fd3409def

		&.btn:not([disabled]):not(.disabled):active,
		&.btn:not([disabled]):not(.disabled).active {
			&:focus {
				box-shadow: map-get($focus, box-shadow);
			}
		}

		&:disabled,
		&.disabled {
			@include clay-css($disabled);

			label,
			.form-check-label {
				color: map-get($disabled, color);
			}

			.c-kbd-inline {
				@include clay-css($disabled-c-kbd-inline);
			}

			&:active {
				@include clay-css($disabled-active);
			}
		}

		@if ($enable-c-inner) {
			.c-inner {
				@include clay-css($c-inner);
			}
		}

		&.autofit-row,
		.autofit-row {
			@include clay-css($autofit-row);
		}

		.c-kbd-inline {
			@include clay-css($c-kbd-inline);
		}

		.form-check-label {
			font-weight: map-get($map, font-weight);
		}

		.custom-control-label {
			font-weight: map-get($map, font-weight);
		}
	}
}
