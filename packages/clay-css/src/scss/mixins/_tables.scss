////
/// @group Tables
////

/// A Bootstrap 4 mixin to help create table row variants.
/// @param {String} $state - The name of the state
/// @param {Color} $background - `The background-color`
/// @param {Color} $border - The `border-color`

@mixin table-row-variant($state, $background, $border: null) {
	// Exact selectors below required to override `.table-striped` and prevent
	// inheritance to nested tables.

	.table-#{$state} {
		&,
		> th,
		> td {
			background-color: $background;
		}

		@if $border != null {
			th,
			td,
			thead th,
			tbody + tbody {
				border-color: $border;
			}
		}
	}

	// Hover states for `.table-hover`
	// Note: this is not available for cells or rows within `thead` or `tfoot`.

	.table-hover {
		$hover-background: clay-darken($background, 5%);

		.table-#{$state} {
			@include hover() {
				background-color: $hover-background;

				> td,
				> th {
					background-color: $hover-background;
				}
			}
		}
	}
}

/// A mixin to help create table variants.
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:

@mixin clay-table-variant($map) {
	@if (type-of($map) == 'map') {
		$enabled: map-get($map, enabled);
		$enabled: if($enabled != null, $enabled, true);

		@if ($enabled) {
			@include clay-css($map);

			thead {
				@include clay-css(map-get($map, thead));

				th,
				td {
					@include clay-css(map-deep-get($map, thead, table-cell));
				}

				th {
					@include clay-css(map-deep-get($map, thead, th));

					[href] {
						@include clay-link(map-deep-get($map, thead, th, href));
					}
				}
			}

			th,
			td {
				@include clay-css(map-get($map, table-cell));

				[href] {
					@include clay-link(map-deep-get($map, table-cell, href));
				}
			}

			th:first-child,
			td:first-child,
			.table-column-start {
				@include clay-css(map-get($map, table-column-start));
			}

			th:last-child,
			td:last-child,
			.table-column-end {
				@include clay-css(map-get($map, table-column-end));
			}

			th {
				@include clay-css(map-get($map, th));
			}

			td {
				@include clay-css(map-get($map, td));
			}

			thead:first-child,
			tbody:first-child,
			tfoot:first-child,
			caption:first-child + thead {
				tr:first-child {
					@include clay-css(map-get($map, table-row-start));

					th,
					td {
						@include clay-css(
							map-deep-get($map, table-row-start, table-cell)
						);

						&:first-child {
							@include clay-css(
								map-deep-get(
									$map,
									table-row-start,
									table-cell-start
								)
							);
						}

						&:last-child {
							@include clay-css(
								map-deep-get(
									$map,
									table-row-start,
									table-cell-end
								)
							);
						}
					}
				}
			}

			.table-row-start {
				@include clay-css(map-get($map, table-row-start));

				.table-cell-start {
					@include clay-css(
						map-deep-get($map, table-row-start, table-cell-start)
					);
				}

				.table-cell-end {
					@include clay-css(
						map-deep-get($map, table-row-start, table-cell-end)
					);
				}
			}

			thead:last-child,
			tbody:last-child,
			tfoot:last-child {
				tr:last-child {
					@include clay-css(map-get($map, table-row-end));

					th,
					td {
						&:first-child {
							@include clay-css(
								map-deep-get(
									$map,
									table-row-end,
									table-cell-start
								)
							);
						}

						&:last-child {
							@include clay-css(
								map-deep-get(
									$map,
									table-row-end,
									table-cell-end
								)
							);
						}
					}
				}
			}

			.table-row-end {
				@include clay-css(map-get($map, table-row-end));

				.table-cell-start {
					@include clay-css(
						map-deep-get($map, table-row-end, table-cell-start)
					);
				}

				.table-cell-end {
					@include clay-css(
						map-deep-get($map, table-row-end, table-cell-end)
					);
				}
			}

			tbody {
				@include clay-css(map-get($map, tbody));

				tr {
					@include clay-css(map-deep-get($map, tbody, tr));

					&:hover {
						@include clay-css(map-deep-get($map, tbody, tr, hover));

						th,
						td {
							@include clay-css(
								map-deep-get($map, tbody, tr, hover, table-cell)
							);
						}

						.quick-action-menu {
							@include clay-css(
								map-deep-get(
									$map,
									tbody,
									tr,
									hover,
									quick-action-menu
								)
							);
						}
					}
				}

				th,
				td {
					@include clay-css(map-deep-get($map, tbody, table-cell));
				}

				+ tbody {
					@include clay-css(map-deep-get($map, tbody, tbody));
				}
			}

			tfoot {
				@include clay-css(map-get($map, tfoot));

				th,
				td {
					@include clay-css(map-deep-get($map, tfoot, table-cell));
				}
			}

			caption {
				@include clay-css(map-get($map, caption));
			}

			.table-divider {
				th,
				td {
					@include clay-css(
						map-deep-get($map, table-divider, table-cell)
					);
				}
			}

			.table-active {
				@include clay-css(map-get($map, table-active));

				&:hover {
					@include clay-css(map-deep-get($map, table-active, hover));

					th,
					td {
						@include clay-css(
							map-deep-get($map, table-active, hover, table-cell)
						);
					}

					.quick-action-menu {
						@include clay-css(
							map-deep-get(
								$map,
								table-active,
								hover,
								quick-action-menu
							)
						);
					}
				}

				th,
				td {
					@include clay-css(
						map-deep-get($map, table-active, table-cell)
					);
				}

				.quick-action-menu {
					@include clay-css(
						map-deep-get($map, table-active, quick-action-menu)
					);
				}
			}

			.table-disabled {
				@include clay-css(map-get($map, table-disabled));

				&:hover {
					@include clay-css(
						map-deep-get($map, table-disabled, hover)
					);

					th,
					td {
						@include clay-css(
							map-deep-get(
								$map,
								table-disabled,
								hover,
								table-cell
							)
						);
					}
				}

				th,
				td {
					@include clay-css(
						map-deep-get($map, table-disabled, table-cell)
					);

					[href] {
						@include clay-link(
							map-deep-get($map, table-disabled, table-cell, href)
						);
					}
				}

				.table-title {
					@include clay-text-typography(
						map-deep-get($map, table-disabled, table-title)
					);
				}

				.table-list-title {
					@include clay-text-typography(
						map-deep-get($map, table-disabled, table-list-title)
					);
				}
			}

			.autofit-col {
				@include clay-css(map-get($map, autofit-col));

				&:first-child {
					@include clay-css(
						map-deep-get($map, autofit-col, first-child)
					);
				}

				&:last-child {
					@include clay-css(
						map-deep-get($map, autofit-col, last-child)
					);
				}
			}

			.custom-control,
			.form-check {
				@include clay-custom-control-variant(
					map-get($map, custom-control)
				);
			}

			.quick-action-menu {
				@include clay-css(map-get($map, quick-action-menu));
			}
		}
	}
}

/// A mixin to help create table-drag variants.
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// See Mixin `clay-css` for available keys to pass into the base selector
/// c-dragging-before: {Map | Null}, // See Mixin `clay-css` for available keys. This is an extra pseudo element if you need.
/// c-dragging-after: {Map | Null}, // See Mixin `clay-css` for available keys. This styles the overlay on the original column when dragging.
/// c-droppable-before: {Map | Null}, // See Mixin `clay-css` for available keys. This styles the left border (background-image) on `c-droppable` columns when dragging
/// c-droppable-after: {Map | Null}, // See Mixin `clay-css` for available keys. This is an extra pseudo element if you need.

@mixin clay-table-drag-variant($map) {
	$cell: map-get($map, cell);
	$cell: if($cell, $cell, ());

	$c-drag: map-get($map, c-drag);
	$c-drag: if($c-drag, $c-drag, ());

	$c-dragging-before: map-get($map, c-dragging-before);
	$c-dragging-before: if($c-dragging-before, $c-dragging-before, ());

	$c-dragging-after: map-get($map, c-dragging-after);
	$c-dragging-after: if($c-dragging-after, $c-dragging-after, ());

	$c-droppable-before: map-get($map, c-droppable-before);
	$c-droppable-before: if($c-droppable-before, $c-droppable-before, ());

	$c-droppable-after: map-get($map, c-droppable-after);
	$c-droppable-after: if($c-droppable-after, $c-droppable-after, ());

	@include clay-css($map);

	th,
	td {
		@include clay-css($cell);
	}

	.c-drag {
		@include clay-css($c-drag);
	}

	.c-dragging {
		&::before {
			@include clay-css($c-dragging-before);
		}

		&::after {
			@include clay-css($c-dragging-after);
		}
	}

	.c-droppable {
		&::before {
			@include clay-css($c-droppable-before);
		}

		&::after {
			@include clay-css($c-droppable-after);
		}
	}
}

/// A mixin to help create table-clone variants.
/// @param {Map} $map - A map of `key: value` pairs. The keys and value types are listed below:
/// @example
/// See Mixin `clay-css` for available keys to pass into the base selector
/// before: {Map | Null}, // See Mixin `clay-css` for available keys. This styles the left border on the `table-clone` variant.
/// after: {Map | Null}, // See Mixin `clay-css` for available keys. This styles the right border on the `table-clone` variant.
/// cell: {Map | Null}, // See Mixin `clay-css` for available keys. This styles the table cell (th and td) in the `table-clone` variant.

@mixin clay-table-clone-variant($map) {
	$before: map-get($map, before);
	$before: if($before, $before, ());

	$after: map-get($map, after);
	$after: if($after, $after, ());

	$cell: map-get($map, cell);
	$cell: if($cell, $cell, ());

	@include clay-css($map);

	&::before {
		@include clay-css($before);
	}

	&::after {
		@include clay-css($after);
	}

	thead th,
	tbody td {
		@include clay-css($cell);
	}
}
