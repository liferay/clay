{namespace ClayTable}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param schema: [
			fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			label: string,
			sortable: bool,
			sortingOrder: string
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleCellContentClick: any}
	{@param? _handleItemToggled: any}
	{@param? _handleRowContentClick: any}
	{@param? _handleSortingClick: any}
	{@param? actionsMenuVariant: string}
	{@param? elementClasses: string}
	{@param? id: string}
	{@param? items: list<?>}
	{@param? selectable: bool}
	{@param? showActionsMenu: bool}
	{@param? showCheckbox: bool}
	{@param? size: string}
	{@param? spritemap: string}
	{@param? tableClasses: string}
	{@param? useDefaultClasses: bool}
	{@param? wrapTable: bool}

	{let $table kind="html"}
		{let $tableAttributes kind="attributes"}
			class="
				{if $useDefaultClasses != false}
					table table-autofit table-hover table-list show-quick-actions-on-hover
				{/if}

				{if $wrapTable == false and $elementClasses}
					{sp}{$elementClasses}
				{/if}

				{if $tableClasses}
					{sp}{$tableClasses}
				{/if}
			"

			{if $id and $wrapTable == false}
				id="{$id}"
			{/if}
		{/let}

		<table {$tableAttributes}>
			{call .header}
				{param _handleSortingClick: $_handleSortingClick /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param showActionsMenu: $showActionsMenu /}
				{param showCheckbox: $showCheckbox /}
				{param spritemap: $spritemap /}
			{/call}

			{call .body}
				{param _handleCellContentClick: $_handleCellContentClick /}
				{param _handleItemToggled: $_handleItemToggled /}
				{param _handleRowContentClick: $_handleRowContentClick /}
				{param actionsMenuVariant: $actionsMenuVariant /}
				{param id: $id /}
				{param items: $items /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param showActionsMenu: $showActionsMenu /}
				{param showCheckbox: $showCheckbox /}
				{param spritemap: $spritemap /}
			{/call}
		</table>
	{/let}

	{let $wrapperAttributes kind="attributes"}
		class="
			{if $useDefaultClasses != false}
				table-responsive
				{if $size}
					-{$size}
				{/if}
			{/if}

			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	{if $wrapTable != false}
		<div {$wrapperAttributes}>
			{$table}
		</div>
	{else}
		{$table}
	{/if}	
{/template}

/**
 * This renders the body of the table
 */
{template .body}
	{@param schema: [
			fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			label: string,
			sortable: bool,
			sortingOrder: string
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleCellContentClick: any}
	{@param? _handleItemToggled: any}
	{@param? _handleRowContentClick: any}
	{@param? actionsMenuVariant: string}
	{@param? id: string}
	{@param? items: list<?>}
	{@param? selectable: bool}
	{@param? showActionsMenu: bool}
	{@param? showCheckbox: bool}
	{@param? spritemap: string}

	<tbody>
		{if $items}
			{call .rows}
				{param _handleCellContentClick: $_handleCellContentClick /}
				{param _handleItemToggled: $_handleItemToggled /}
				{param _handleRowContentClick: $_handleRowContentClick /}
				{param actionsMenuVariant: $actionsMenuVariant /}
				{param groupName: $id /}
				{param items: $items /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param showActionsMenu: $showActionsMenu /}
				{param showCheckbox: $showCheckbox /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	</tbody>
{/template}

/**
 * This renders the header of the table
 */
{template .header}
	{@param schema: [
			fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			label: string,
			sortable: bool,
			sortingOrder: string
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleSortingClick: any}
	{@param? selectable: bool}
	{@param? showActionsMenu: bool}
	{@param? showCheckbox: bool}
	{@param? spritemap: string}

	<thead>
		<tr>
			{if $selectable and $showCheckbox}
				<th></th>
			{/if}

			{if $schema.fields}
				{foreach $fieldSchema in $schema.fields}
					{let $tableHeaderAttributes kind="attributes"}
						{if index($fieldSchema) == 0}
							class="table-cell-expand"
						{/if}
					{/let}

					<th {$tableHeaderAttributes}>
						{if not $fieldSchema.sortable}
							{$fieldSchema.label}
						{else}
							{call ClayButton.render}
								{param events: ['click': $_handleSortingClick] /}
								{param icon: $fieldSchema.sortingOrder ? 'order-arrow-' + ($fieldSchema.sortingOrder == 'asc' ? 'up' : 'down') : null /}
								{param iconAlignment: 'right' /}
								{param label: $fieldSchema.label ?: $fieldSchema.fieldName /}
								{param spritemap: $spritemap /}
								{param style: 'unstyled' /}
							{/call}
						{/if}
					</th>
				{/foreach}
			{/if}

			{if $showActionsMenu}
				<th></th>
			{/if}
		</tr>
	</thead>
{/template}

/**
 * This renders a row.
 */
{template .row}
	{@param item: ?}
	{@param schema: [
			fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			label: string,
			sortable: bool,
			sortingOrder: string
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleCellContentClick: any}
	{@param? _handleItemToggled: any}
	{@param? _handleRowContentClick: any}
	{@param? actionsMenuVariant: string}
	{@param? groupName: string}
	{@param? selectable: bool}
	{@param? showActionsMenu: bool}
	{@param? showCheckbox: bool}
	{@param? spritemap: string}

	{let $attributes kind="attributes"}
		{if $selectable and $item.selected}
			class="table-active"
		{/if}

		data-onclick="{$_handleRowContentClick}"
	{/let}

	<tr {$attributes}>
		{if $selectable and $showCheckbox}
			<td>
				{call ClayCheckbox.render}
					{param ariaLabelledBy: $groupName ? 'group-' + $groupName : null /}
					{param checked: $item.selected /}
					{param disabled: $item.disabled /}
					{param events: ['change': $_handleItemToggled] /}
					{param label kind="text"}
						{if $item.selected}
							{msg desc="The word 'select' used as a verb"}
								select
							{/msg}
						{else}
							{msg desc="The word 'deselect' used as a verb"}
								deselect
							{/msg}
						{/if}
					{/param}

					{param name kind="text"}
						{if $schema.inputName}
							{$schema.inputName}
						{elseif $schema.inputNameField and $schema.inputNamesMap}
							{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
								{$schema.inputNamesMap[$item[$schema.inputNameField]]}
							{elseif $schema.inputNamesMap['*']}
								{$schema.inputNamesMap['*']}
							{/if}
						{/if}
					{/param}

					{param showLabel: false /}
					{param value: $item[$schema.inputValueField] /}
				{/call}
			</td>
		{/if}

		{if $schema.fields}
			{foreach $fieldSchema in $schema.fields}
				{let $variant kind="text"}
					{if $fieldSchema.contentRenderer}
						{$fieldSchema.contentRenderer}
					{elseif $fieldSchema.fieldsMap and $fieldSchema.fieldsMap.contentRenderer}
						{if $fieldSchema.contentRendererMap and $fieldSchema.contentRendererMap[$item[$fieldSchema.fieldsMap.contentRenderer]]}
							{$fieldSchema.contentRendererMap[$item[$fieldSchema.fieldsMap.contentRenderer]]}
						{elseif $fieldSchema.contentRendererMap['*']}
							{$fieldSchema.contentRendererMap['*']}
						{elseif index($fieldSchema) == 0}
							main
						{/if}
					{elseif index($fieldSchema) == 0}
						main
					{/if}
				{/let}

				{delcall ClayTable.Cell variant="$variant"}
					{param _handleCellContentClick: $_handleCellContentClick /}
					{param fieldSchema: $fieldSchema /}
					{param item: $item /}
					{param spritemap: $spritemap /}
					{param value: $item[$fieldSchema.fieldName] ?: null /}
				{/delcall}
			{/foreach}
		{/if}

		{if $showActionsMenu and $item.actionItems and $spritemap}
			{delcall ClayTable.ActionsMenu variant="$actionsMenuVariant"}
				{param actionItems: $item.actionItems /}
				{param spritemap: $spritemap /}
			{/delcall}
		{/if}
	</tr>
{/template}

/**
 * This renders all the rows in the table, iteraing over the items and its
 * possible nested items.
 */
{template .rows}
	{@param items: list<?>}
	{@param schema: [
		fields: list<[
			contentRenderer: string,
			contentRendererMap: ?,
			fieldName: string,
			fieldsMap: ?,
			label: string,
			sortable: bool,
			sortingOrder: string
		]>,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string
	]}
	{@param? _handleCellContentClick: any}
	{@param? _handleItemToggled: any}
	{@param? _handleRowContentClick: any}
	{@param? actionsMenuVariant: string}
	{@param? groupName: string}
	{@param? selectable: bool}
	{@param? showActionsMenu: bool}
	{@param? showCheckbox: bool}
	{@param? spritemap: string}

	{foreach $item in $items}
		{if $item.items}
			{let $currentgroupName kind="text"}
				{if $groupName}
					{$groupName}-
				{/if}

				{index($item)}
			{/let}

			{let $dividerAttributes kind="attributes"}
				class="table-divider"
				id="group-{$currentgroupName}"
			{/let}

			<tr {$dividerAttributes}>
				{let $cellAttributes kind="attributes"}
					colspan="{length($schema.fields) + ($showCheckbox and $selectable ? 1 : 0) + ($showActionsMenu ? 1 : 0)}"
				{/let}

				<td {$cellAttributes}>{$item.label}</td>
			</tr>

			{call .rows}
				{param _handleCellContentClick: $_handleCellContentClick /}
				{param _handleItemToggled: $_handleItemToggled /}
				{param _handleRowContentClick: $_handleRowContentClick /}
				{param actionsMenuVariant: $actionsMenuVariant /}
				{param groupName: $currentgroupName /}
				{param items: $item.items /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param showActionsMenu: $showActionsMenu /}
				{param showCheckbox: $showCheckbox /}
				{param spritemap: $spritemap /}
			{/call}
		{else}
			{call .row}
				{param _handleCellContentClick: $_handleCellContentClick /}
				{param _handleItemToggled: $_handleItemToggled /}
				{param _handleRowContentClick: $_handleRowContentClick /}
				{param actionsMenuVariant: $actionsMenuVariant /}
				{param groupName: $groupName /}
				{param item: $item /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param showActionsMenu: $showActionsMenu /}
				{param showCheckbox: $showCheckbox /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	{/foreach}
{/template}

/**
 * This renders the default variant of the actions menu
 */
{deltemplate ClayTable.ActionsMenu}
	{@param actionItems: list<?>}
	{@param spritemap: string}

	<td>
		<div class="quick-action-menu">
			{foreach $actionItem in $actionItems}
				{if $actionItem.quickAction and $actionItem.icon}
					{call ClayLink.render}
						{param ariaLabel: $actionItem.label /}
						{param elementClasses: 'component-action quick-action-item' /}
						{param href: $actionItem.href /}
						{param icon: $actionItem.icon /}
						{param spritemap: $spritemap /}
						{param title: $actionItem.lable /}
					{/call}
				{/if}
			{/foreach}
		</div>

		{call ClayActionsDropdown.render}
			{param items: $actionItems /}
			{param spritemap: $spritemap /}
			{param triggerClasses: 'component-action' /}
		{/call}
	</td>
{/deltemplate}

/**
 * This renders the default variant of a cell
 */
{deltemplate ClayTable.Cell}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		<span class="text-truncate">{$value}</span>
	</td>
{/deltemplate}

/**
 * This renders the default variant of a cell
 */
{deltemplate ClayTable.Cell variant="'button'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		{call ClayButton.render}
			{param events: ['click': $_handleCellContentClick ]/}
			{param label: $fieldSchema.label /}
			{param size: 'sm' /}
			{param style: 'secondary' /}
			{param type: $fieldSchema.buttonStyle /}
		{/call}
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type label
 */
{deltemplate ClayTable.Cell variant="'label'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		{if $value}
			{foreach $label in $value}
				{let $style kind="text"}
					{if $fieldSchema.labelStylesMap}
						{$fieldSchema.labelStylesMap[$label] ?: $fieldSchema.labelStylesMap['*']}
					{/if}
				{/let}

				{call ClayLabel.render}
					{param label: $label /}
					{param style: $style != '' ? $style : null /}
				{/call}
			{/foreach}
		{/if}
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type link
 */
{deltemplate ClayTable.Cell variant="'link'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		{call ClayLink.render}
			{param elementClasses: 'text-truncate' /}
			{param href: $item[$fieldSchema.hrefFieldName] /}
			{param label: $value /}
		{/call}
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type main. This type renders an sticker
 * if passed and a text or link in semibold. Is used for the first cell of each
 * row.
 */
{deltemplate ClayTable.Cell variant="'main'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td class="table-cell-expand">
		<h5 class="table-list-title">
			<span class="text-truncate-inline">
				{if $item.href}
					{call ClayLink.render}
						{param elementClasses: 'text-truncate' /}
						{param href: $item.href /}
						{param label: $value /}
					{/call}
				{else}
					<span class="text-truncate">{$value}</span>
				{/if}
			</span>
		</h5>
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type number
 */
{deltemplate ClayTable.Cell variant="'number'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td class="text-right">
		{$value}
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type progressbar
 */
{deltemplate ClayTable.Cell variant="'progressbar'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		{call ClayProgressBar.render}
			{param maxValue: $fieldSchema.maxValue /}
			{param minValue: $fieldSchema.minValue /}
			{param value: $value /}
		{/call}
	</td>
{/deltemplate}

/**
 * This renders a variant of a cell of type image
 */
{deltemplate ClayTable.Cell variant="'image'"}
	{@param fieldSchema: ?}
	{@param item: ?}
	{@param value: ?}
	{@param? _handleCellContentClick: any}
	{@param? spritemap: string}

	<td>
		{if $value}
			{let $content kind="html"}
				{let $alt: $item[$fieldSchema.altFieldName] /}

				{let $attributes kind="attributes"}
					{if $alt}
						alt="{$alt}"
					{/if}

					class="table-img"

					src="{$value}"
				{/let}

				<img {$attributes}>
			{/let}

			{if $fieldSchema.autofitImage}
				<div class="autofit-row">
					<div class="autofit-col">
						{$content}
					</div>
				</div>
			{else}
				{$content}
			{/if}
		{/if}
	</td>
{/deltemplate}
