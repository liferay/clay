{namespace ClayCardGrid}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param? elementClasses: string}
	{@param? handleItemToggled_: any}
	{@param? id: string}
	{@param? items: list<?>}
	{@param? selectable: bool}
	{@param? spritemap: string}

	{let $attributes kind="attributes"}
		class="card-page
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<ul {$attributes}>
		{if $items and $spritemap}

			{call .items}
				{param handleItemToggled_: $handleItemToggled_ /}
				{param items: $items /}
				{param schema:	$schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	</ul>
{/template}

/**
 * This renders an item.
 */
{template .item}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	<li class="card-page-item-directory">
		{let $variant kind="text"}
			{if $schema.contentRenderer}
				{$schema.contentRenderer}
			{elseif $schema and $schema.fieldsMap and $schema.fieldsMap.contentRenderer}
				{if $schema.contentRendererMap and $schema.contentRendererMap[$item[$schema.fieldsMap.contentRenderer]]}
					{$schema.contentRendererMap[$item[$schema.fieldsMap.contentRenderer]]}
				{elseif $schema.contentRendererMap['*']}
					{$schema.contentRendererMap['*']}
				{else}
					image
				{/if}
			{else}
				image
			{/if}
		{/let}

		{delcall ClayCardGrid.Card variant="$variant"}
			{param groupName: $groupName /}
			{param handleItemToggled_: $handleItemToggled_ /}
			{param item: $item /}
			{param schema: $schema /}
			{param selectable: $selectable /}
			{param spritemap: $spritemap /}
		{/delcall}
	</li>
{/template}

/**
 * This renders all the items in the list, iteraing over the items and its
 * possible nested items.
 */
{template .items}
	{@param items: list<?>}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	{foreach $item in $items}
		{if $item.items}
			{let $currentgroupName kind="text"}
				{if $groupName}
					{$groupName}-
				{/if}

				{index($item)}
			{/let}

			{let $headerAttributes kind="attributes"}
				class="card-section-header"
				id="group-{$currentgroupName}"
			{/let}

			<li>
				<h4 {$headerAttributes}>{$item.label}</h4>
			</li>

			{call .items}
				{param groupName: $currentgroupName /}
				{param handleItemToggled_: $handleItemToggled_ /}
				{param items: $item.items /}
				{param schema:	$schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{else}
			{call .item}
				{param groupName: $groupName /}
				{param handleItemToggled_: $handleItemToggled_ /}
				{param item: $item /}
				{param schema: $schema /}
				{param selectable: $selectable /}
				{param spritemap: $spritemap /}
			{/call}
		{/if}
	{/foreach}
{/template}

/**
 * This renders the default card item.
 */
{deltemplate ClayCardGrid.Card}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}
{/deltemplate}

/**
 * This renders a card item of type file.
 */
{deltemplate ClayCardGrid.Card variant="'file'"}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	{call ClayFileCard.render}
		{param actionItems: $item.actionItems /}
		{param disabled: $item.disabled /}
		{param events: ['itemToggled': $handleItemToggled_ ] /}
		{param fileType: $item[$schema.fieldsMap.fileType] /}
		{param fileTypeStyle: $schema.fileTypeStylesMap ? $schema.fileTypeStylesMap[$item[$schema.fieldsMap.fileType]] ?: $schema.fileTypeStylesMap['*'] : null /}
		{param groupName: $groupName /}
		{param href: $item[$schema.fieldsMap.href] /}
		{param icon: $schema.iconsMap ? $schema.iconsMap[$item[$schema.fieldsMap.icon]] ?: $schema.iconsMap['*'] : $item[$schema.fieldsMap.icon] /}
		{param inputName kind="text"}
			{if $schema.inputName}
				{$schema.inputName}
			{elseif $schema.inputNameField and $schema.inputNamesMap}
				{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
					{$schema.inputNamesMap[$item[$schema.inputNameField]]}
				{elseif $schema.inputNamesMap['*']}
					{$schema.inputNamesMap['*']}
				{/if}
			{/if}
		{/param}

		{param inputValue: $item[$schema.inputValueField] /}
		{param labels: $item[$schema.fieldsMap.labels] /}
		{param labelStylesMap: $schema.labelStylesMap /}
		{param selectable: $selectable /}
		{param selected: $item.selected /}
		{param spritemap: $spritemap /}
		{param subtitle: $item[$schema.fieldsMap.description] /}
		{param title: $item[$schema.fieldsMap.title] /}
	{/call}
{/deltemplate}

/**
 * This renders a card item of type horizontal.
 */
{deltemplate ClayCardGrid.Card variant="'horizontal'"}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	{call ClayHorizontalCard.render}
		{param actionItems: $item.actionItems /}
		{param disabled: $item.disabled /}
		{param events: ['itemToggled': $handleItemToggled_ ] /}
		{param groupName: $groupName /}
		{param href: $item[$schema.fieldsMap.href] /}
		{param icon: $schema.iconsMap ? $schema.iconsMap[$item[$schema.fieldsMap.icon]] ?: $schema.iconsMap['*'] : $item[$schema.fieldsMap.icon] /}
		{param inputName kind="text"}
			{if $schema.inputName}
				{$schema.inputName}
			{elseif $schema.inputNameField and $schema.inputNamesMap}
				{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
					{$schema.inputNamesMap[$item[$schema.inputNameField]]}
				{elseif $schema.inputNamesMap['*']}
					{$schema.inputNamesMap['*']}
				{/if}
			{/if}
		{/param}

		{param inputValue: $item[$schema.inputValueField] /}
		{param selectable: $selectable /}
		{param selected: $item.selected /}
		{param spritemap: $spritemap /}
		{param title: $item[$schema.fieldsMap.title] /}
	{/call}
{/deltemplate}

/**
 * This renders a card item of type image.
 */
{deltemplate ClayCardGrid.Card variant="'image'"}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	{call ClayImageCard.render}
		{param actionItems: $item.actionItems /}
		{param disabled: $item.disabled /}
		{param events: ['itemToggled': $handleItemToggled_ ] /}
		{param fileType: $item[$schema.fieldsMap.fileType] /}
		{param fileTypeStyle: $schema.fileTypeStylesMap ? $schema.fileTypeStylesMap[$item[$schema.fieldsMap.fileType]] ?: $schema.fileTypeStylesMap['*'] : null /}
		{param groupName: $groupName /}
		{param href: $item[$schema.fieldsMap.href] /}
		{param icon: $schema.iconsMap ? $schema.iconsMap[$item[$schema.fieldsMap.icon]] ?: $schema.iconsMap['*'] : $item[$schema.fieldsMap.icon] /}
		{param imageAlt: $item[$schema.fieldsMap.imageAlt] /}
		{param imageSrc: $item[$schema.fieldsMap.imageSrc] /}
		{param inputName kind="text"}
			{if $schema.inputName}
				{$schema.inputName}
			{elseif $schema.inputNameField and $schema.inputNamesMap}
				{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
					{$schema.inputNamesMap[$item[$schema.inputNameField]]}
				{elseif $schema.inputNamesMap['*']}
					{$schema.inputNamesMap['*']}
				{/if}
			{/if}
		{/param}

		{param inputValue: $item[$schema.inputValueField] /}
		{param labels: $item[$schema.fieldsMap.labels] /}
		{param labelStylesMap: $schema.labelStylesMap /}
		{param selectable: $selectable /}
		{param selected: $item.selected /}
		{param spritemap: $spritemap /}
		{param subtitle: $item[$schema.fieldsMap.description] /}
		{param title: $item[$schema.fieldsMap.title] /}
	{/call}
{/deltemplate}

/**
 * This renders a card item of type user.
 */
{deltemplate ClayCardGrid.Card variant="'user'"}
	{@param item: ?}
	{@param schema: [
		contentRenderer: string,
		contentRendererMap: ?,
		fieldName: string,
		fieldsMap: ?,
		fileTypeStylesMap: ?,
		iconsMap: ?,
		inputName: string,
		inputNameField: string,
		inputNamesMap: ?,
		inputValueField: string,
		labelStylesMap: ?,
		userColorsMap: ?
	]}
	{@param spritemap: string}
	{@param? groupName: string}
	{@param? handleItemToggled_: any}
	{@param? selectable: bool}

	{call ClayUserCard.render}
		{param actionItems: $item.actionItems /}
		{param disabled: $item.disabled /}
		{param events: ['itemToggled': $handleItemToggled_ ] /}
		{param groupName: $groupName /}
		{param href: $item[$schema.fieldsMap.href] /}
		{param imageAlt: $item[$schema.fieldsMap.imageAlt] /}
		{param imageSrc: $item[$schema.fieldsMap.imageSrc] /}
		{param initials: $item[$schema.fieldsMap.initials] /}
		{param inputName kind="text"}
			{if $schema.inputName}
				{$schema.inputName}
			{elseif $schema.inputNameField and $schema.inputNamesMap}
				{if $schema.inputNamesMap[$item[$schema.inputNameField]]}
					{$schema.inputNamesMap[$item[$schema.inputNameField]]}
				{elseif $schema.inputNamesMap['*']}
					{$schema.inputNamesMap['*']}
				{/if}
			{/if}
		{/param}

		{param inputValue: $item[$schema.inputValueField] /}
		{param name: $item[$schema.fieldsMap.username] /}
		{param selectable: $selectable /}
		{param selected: $item.selected /}
		{param spritemap: $spritemap /}
		{param subtitle: $item[$schema.fieldsMap.description] /}
		{param userColor: $schema.userColorsMap ? $schema.userColorsMap[$item[$schema.fieldsMap.userColor]] ?: $schema.userColorsMap['*'] : $item[$schema.fieldsMap.userColor] /}
	{/call}
{/deltemplate}