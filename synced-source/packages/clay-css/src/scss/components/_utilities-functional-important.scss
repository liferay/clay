.align-baseline {
	vertical-align: baseline !important;
}

.align-top {
	vertical-align: top !important;
}

.align-middle {
	vertical-align: middle !important;
}

.align-bottom {
	vertical-align: bottom !important;
}

.align-text-bottom {
	vertical-align: text-bottom !important;
}

.align-text-top {
	vertical-align: text-top !important;
}

// Background

@each $color, $value in $bg-theme-colors {
	@if not clay-is-map-unset($value) {
		$selector: if(
			starts-with($color, '.') or
				starts-with($color, '#') or
				starts-with($color, '%'),
			$color,
			str-insert($color, '.bg-', 1)
		);

		#{$selector} {
			@include clay-css($value);
		}

		a#{$selector},
		button#{$selector} {
			&:hover,
			&:focus {
				@include clay-css(map-get($value, hover));
			}
		}
	}
}

@if $enable-gradients {
	@each $color, $value in $bg-gradient-theme-colors {
		@if not clay-is-map-unset($value) {
			.bg-gradient-#{$color} {
				@include clay-css($value);
			}
		}
	}
}

// Border

.border {
	border: $border-width solid $border-color !important;
}

.border-top {
	border-top: $border-width solid $border-color !important;
}

.border-right {
	border-right: $border-width solid $border-color !important;
}

.border-bottom {
	border-bottom: $border-width solid $border-color !important;
}

.border-left {
	border-left: $border-width solid $border-color !important;
}

.border-0 {
	border: 0 !important;
}

.border-top-0 {
	border-top: 0 !important;
}

.border-right-0 {
	border-right: 0 !important;
}

.border-bottom-0 {
	border-bottom: 0 !important;
}

.border-left-0 {
	border-left: 0 !important;
}

@each $color, $value in $border-theme-colors {
	@if not clay-is-map-unset($value) {
		$selector: if(
			starts-with($color, '.') or
				starts-with($color, '#') or
				starts-with($color, '%'),
			$color,
			str-insert($color, '.border-', 1)
		);

		#{$selector} {
			@include clay-css($value);
		}
	}
}

// Border-radius

.rounded-sm {
	border-radius: $border-radius-sm !important;
}

.rounded {
	border-radius: $rounded-border-radius !important;
}

.rounded-top {
	border-top-left-radius: $rounded-border-radius !important;
	border-top-right-radius: $rounded-border-radius !important;
}

.rounded-right {
	border-bottom-right-radius: $rounded-border-radius !important;
	border-top-right-radius: $rounded-border-radius !important;
}

.rounded-bottom {
	border-bottom-left-radius: $rounded-border-radius !important;
	border-bottom-right-radius: $rounded-border-radius !important;
}

.rounded-left {
	border-bottom-left-radius: $rounded-border-radius !important;
	border-top-left-radius: $rounded-border-radius !important;
}

.rounded-lg {
	border-radius: $border-radius-lg !important;
}

.rounded-circle {
	border-radius: $rounded-circle-border-radius !important;
}

.rounded-pill {
	border-radius: $rounded-pill !important;
}

.rounded-0 {
	border-radius: $rounded-0-border-radius !important;
}

// Clearfix

.clearfix {
	&::after {
		clear: both;
		content: '';
		display: block;
	}
}

// Display

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $value in $displays {
			.d#{$infix}-#{$value} {
				display: $value !important;
			}
		}
	}
}

.hide {
	display: none !important;
}

// Display Print

@media print {
	@each $value in $displays {
		.d-print-#{$value} {
			display: $value !important;
		}
	}
}

/* SPDX-SnippetBegin
 * SPDX-License-Identifier: MIT
 * SPDX-SnippetCopyrightText: Â© 2012 Nicolas Gallagher <https://github.com/suitcss/components-flex-embed>
 */

.embed-responsive {
	display: block;
	overflow: hidden;
	padding: 0;
	position: relative;
	width: 100%;

	&::before {
		content: '';
		display: block;
	}

	.embed-responsive-item,
	iframe,
	embed,
	object,
	video {
		border-width: 0;
		bottom: 0;
		height: 100%;
		left: 0;
		position: absolute;
		top: 0;
		width: 100%;
	}
}

@each $embed-responsive-aspect-ratio in $embed-responsive-aspect-ratios {
	$embed-responsive-aspect-ratio-x: nth($embed-responsive-aspect-ratio, 1);
	$embed-responsive-aspect-ratio-y: nth($embed-responsive-aspect-ratio, 2);

	.embed-responsive-#{$embed-responsive-aspect-ratio-x}by#{$embed-responsive-aspect-ratio-y} {
		&::before {
			padding-top: calc(
				#{$embed-responsive-aspect-ratio-y} /
					#{$embed-responsive-aspect-ratio-x} *
					100%
			);
		}
	}
}

/* SPDX-SnippetEnd */

// Flex

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.flex#{$infix}-row {
			flex-direction: row !important;
		}

		.flex#{$infix}-column {
			flex-direction: column !important;
		}

		.flex#{$infix}-row-reverse {
			flex-direction: row-reverse !important;
		}

		.flex#{$infix}-column-reverse {
			flex-direction: column-reverse !important;
		}

		.flex#{$infix}-wrap {
			flex-wrap: wrap !important;
		}

		.flex#{$infix}-nowrap {
			flex-wrap: nowrap !important;
		}

		.flex#{$infix}-wrap-reverse {
			flex-wrap: wrap-reverse !important;
		}

		.flex#{$infix}-fill {
			flex: 1 1 auto !important;
		}

		.flex#{$infix}-grow-0 {
			flex-grow: 0 !important;
		}

		.flex#{$infix}-grow-1 {
			flex-grow: 1 !important;
		}

		.flex#{$infix}-shrink-0 {
			flex-shrink: 0 !important;
		}

		.flex#{$infix}-shrink-1 {
			flex-shrink: 1 !important;
		}

		.justify-content#{$infix}-start {
			justify-content: flex-start !important;
		}

		.justify-content#{$infix}-end {
			justify-content: flex-end !important;
		}

		.justify-content#{$infix}-center {
			justify-content: center !important;
		}

		.justify-content#{$infix}-between {
			justify-content: space-between !important;
		}

		.justify-content#{$infix}-around {
			justify-content: space-around !important;
		}

		.align-items#{$infix}-start {
			align-items: flex-start !important;
		}

		.align-items#{$infix}-end {
			align-items: flex-end !important;
		}

		.align-items#{$infix}-center {
			align-items: center !important;
		}

		.align-items#{$infix}-baseline {
			align-items: baseline !important;
		}

		.align-items#{$infix}-stretch {
			align-items: stretch !important;
		}

		.align-content#{$infix}-start {
			align-content: flex-start !important;
		}

		.align-content#{$infix}-end {
			align-content: flex-end !important;
		}

		.align-content#{$infix}-center {
			align-content: center !important;
		}

		.align-content#{$infix}-between {
			align-content: space-between !important;
		}

		.align-content#{$infix}-around {
			align-content: space-around !important;
		}

		.align-content#{$infix}-stretch {
			align-content: stretch !important;
		}

		.align-self#{$infix}-auto {
			align-self: auto !important;
		}

		.align-self#{$infix}-start {
			align-self: flex-start !important;
		}

		.align-self#{$infix}-end {
			align-self: flex-end !important;
		}

		.align-self#{$infix}-center {
			align-self: center !important;
		}

		.align-self#{$infix}-baseline {
			align-self: baseline !important;
		}

		.align-self#{$infix}-stretch {
			align-self: stretch !important;
		}
	}
}

// Float

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.float#{$infix}-left {
			float: left !important;
		}

		.float#{$infix}-right {
			float: right !important;
		}

		.float#{$infix}-none {
			float: none !important;
		}
	}
}

// Overflow

@each $value in $overflows {
	.overflow-#{$value} {
		overflow: $value !important;
	}
}

// Position

@each $position in $positions {
	.position-#{$position} {
		position: $position !important;
	}
}

.fixed-top {
	left: 0;
	position: fixed;
	right: 0;
	top: 0;
	z-index: $zindex-fixed;
}

.fixed-bottom {
	bottom: 0;
	left: 0;
	position: fixed;
	right: 0;
	z-index: $zindex-fixed;
}

.sticky-bottom {
	@supports (position: sticky) {
		bottom: 0;
		position: sticky;
		z-index: $zindex-sticky;
	}
}

.sticky-top {
	@supports (position: sticky) {
		position: sticky;
		top: 0;
		z-index: $zindex-sticky;
	}
}

// Screenreaders

.sr-only {
	border: 0;
	clip: rect(0, 0, 0, 0);
	height: 1px;

	// Fix for https://github.com/twbs/bootstrap/issues/25686

	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	white-space: nowrap;
	width: 1px;
}

.sr-only-focusable {
	&:active,
	&:focus {
		clip: auto;
		height: auto;
		overflow: visible;
		position: static;
		white-space: normal;
		width: auto;
	}
}

// Shadows

.shadow-sm {
	box-shadow: $box-shadow-sm !important;
}

.shadow {
	box-shadow: $box-shadow !important;
}

.shadow-lg {
	box-shadow: $box-shadow-lg !important;
}

.shadow-none {
	box-shadow: none !important;
}

// Width and Height

@each $prop, $abbrev in (width: w, height: h) {
	@each $size, $length in $sizes {
		.#{$abbrev}-#{$size} {
			#{$prop}: $length !important;
		}
	}
}

.mw-100 {
	max-width: 100% !important;
}

.mh-100 {
	max-height: 100% !important;
}

.min-vw-100 {
	min-width: 100vw !important;
}

.min-vh-100 {
	min-height: 100vh !important;
}

.vw-100 {
	width: 100vw !important;
}

.vh-100 {
	height: 100vh !important;
}

// Margin and Padding

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		@each $prop, $abbrev in (margin: m, padding: p) {
			@each $size, $length in $spacers {
				.#{$abbrev}#{$infix}-#{$size} {
					#{$prop}: $length !important;
				}

				.#{$abbrev}t#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-top: $length !important;
				}

				.#{$abbrev}r#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-right: $length !important;
				}

				.#{$abbrev}b#{$infix}-#{$size},
				.#{$abbrev}y#{$infix}-#{$size} {
					#{$prop}-bottom: $length !important;
				}

				.#{$abbrev}l#{$infix}-#{$size},
				.#{$abbrev}x#{$infix}-#{$size} {
					#{$prop}-left: $length !important;
				}
			}
		}

		// Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)

		@each $size, $length in $spacers {
			@if $size != 0 {
				.m#{$infix}-n#{$size} {
					margin: math-sign($length) !important;
				}

				.mt#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-top: math-sign($length) !important;
				}

				.mr#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-right: math-sign($length) !important;
				}

				.mb#{$infix}-n#{$size},
				.my#{$infix}-n#{$size} {
					margin-bottom: math-sign($length) !important;
				}

				.ml#{$infix}-n#{$size},
				.mx#{$infix}-n#{$size} {
					margin-left: math-sign($length) !important;
				}
			}
		}

		.m#{$infix}-auto {
			margin: auto !important;
		}

		.mt#{$infix}-auto,
		.my#{$infix}-auto {
			margin-top: auto !important;
		}

		.mr#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-right: auto !important;
		}

		.mb#{$infix}-auto,
		.my#{$infix}-auto {
			margin-bottom: auto !important;
		}

		.ml#{$infix}-auto,
		.mx#{$infix}-auto {
			margin-left: auto !important;
		}
	}
}

// Stretched link

.stretched-link {
	&::after {
		bottom: 0;
		content: '';
		left: 0;
		pointer-events: auto;
		position: absolute;
		right: 0;
		top: 0;
		z-index: 1;
	}
}

// Text Alignment

.text-justify {
	text-align: justify !important;
}

.text-wrap {
	white-space: normal !important;
}

.text-nowrap {
	white-space: nowrap !important;
}

.text-truncate {
	@include clay-css($text-truncate);
}

.text-truncate-inline {
	@include clay-map-to-css($text-truncate-inline);
}

// Responsive Text Alignment

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.text#{$infix}-left {
			text-align: left !important;
		}

		.text#{$infix}-right {
			text-align: right !important;
		}

		.text#{$infix}-center {
			text-align: center !important;
		}
	}
}

// Text Transform

.text-lowercase {
	text-transform: lowercase !important;
}

.text-uppercase {
	text-transform: uppercase !important;
}

.text-capitalize {
	text-transform: capitalize !important;
}

// Font Weight and Italics

.font-weight-lighter,
.text-weight-lighter {
	font-weight: $font-weight-lighter !important;
}

.font-weight-light,
.text-weight-light {
	font-weight: $font-weight-light !important;
}

.font-weight-normal,
.text-weight-normal {
	font-weight: $font-weight-normal !important;
}

.font-weight-semi-bold,
.text-weight-semi-bold {
	font-weight: $font-weight-semi-bold !important;
}

.font-weight-bold,
.text-weight-bold {
	font-weight: $font-weight-bold !important;
}

.font-weight-bolder,
.text-weight-bolder {
	font-weight: $font-weight-bolder !important;
}

.font-italic,
.text-italic {
	font-style: italic !important;
}

.font-monospace,
.text-monospace {
	font-family: $font-family-monospace !important;
}

// Font Sizes

@each $selector, $value in $font-sizes {
	@if not clay-is-map-unset($value) {
		$selector: if(
			starts-with($selector, '.') or
				starts-with($selector, '#') or
				starts-with($selector, '%'),
			$selector,
			str-insert($selector, '.', 1)
		);

		#{$selector} {
			@include clay-css($value);
		}
	}
}

// Contextual Colors

.text-white {
	color: $white !important;
}

@each $color, $value in $text-theme-colors {
	@if not clay-is-map-unset($value) {
		$selector: if(
			starts-with($color, '.') or
				starts-with($color, '#') or
				starts-with($color, '%'),
			$color,
			str-insert($color, '.text-', 1)
		);

		#{$selector} {
			@include clay-css($value);
		}

		a#{$selector} {
			&:hover,
			&:focus {
				@include clay-css(map-get($value, hover));
			}
		}
	}
}

// Misc

.text-hide {
	background-color: transparent;
	border: 0;
	color: transparent;
	font: 0/0 a;
	text-shadow: none;
}

@each $key, $value in $text-decorations {
	@if not clay-is-map-unset($value) {
		$selector: if(
			starts-with($key, '.') or
				starts-with($key, '#') or
				starts-with($key, '%'),
			$key,
			str-insert($key, '.', 1)
		);

		#{$selector} {
			@include clay-link($value);
		}
	}
}

.text-break {
	overflow-wrap: break-word !important;
	word-wrap: break-word !important;
}

// Reset

.text-reset {
	color: inherit !important;
}

// Visibility

.visible {
	visibility: visible !important;
}

.invisible {
	visibility: hidden !important;
}

// C Prefers Expanded Text

%c-prefers-expanded-text {
	overflow-wrap: break-word !important;
	white-space: normal !important;
	word-wrap: break-word !important;
}

// C Prefers Link Underline

@include clay-map-to-css($c-prefers-link-underline);

// C Prefers Letter Spacing

@include clay-map-to-css($c-prefers-letter-spacing);

// Display C Reduced Motion

@include clay-map-to-css($displays-c-prefers-reduced-motion);

// C Prefers Reduced Motion

.c-prefers-reduced-motion {
	@include clay-css($c-prefers-reduced-motion);

	.loading-animation-squares {
		@include clay-map-to-css(
			map-deep-get($loading-animation-squares, 'prefers-reduced-motion')
		);
	}
}
